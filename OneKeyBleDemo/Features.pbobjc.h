// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: Features.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class FileInfoList_FileInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BackupType

/**
 * *
 * Type of the mnemonic backup given/received by the device during reset/recovery.
 **/
typedef GPB_ENUM(BackupType) {
  /** also called "Single Backup", see BIP-0039 */
  BackupType_Bip39 = 0,

  /** also called "Shamir Backup", see SLIP-0039 */
  BackupType_Slip39Basic = 1,

  /** also called "Super Shamir" or "Shamir with Groups", see SLIP-0039#two-level-scheme */
  BackupType_Slip39Advanced = 2,
};

GPBEnumDescriptor *BackupType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BackupType_IsValidValue(int32_t value);

#pragma mark - Enum SafetyCheckLevel

/**
 * *
 * Level of safety checks for unsafe actions like spending from invalid path namespace or setting high transaction fee.
 **/
typedef GPB_ENUM(SafetyCheckLevel) {
  /** disallow unsafe actions, this is the default */
  SafetyCheckLevel_Strict = 0,

  /** ask user before unsafe action */
  SafetyCheckLevel_PromptAlways = 1,

  /** like PromptAlways but reverts to Strict after reboot */
  SafetyCheckLevel_PromptTemporarily = 2,
};

GPBEnumDescriptor *SafetyCheckLevel_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SafetyCheckLevel_IsValidValue(int32_t value);

#pragma mark - Enum OneKeyDeviceType

typedef GPB_ENUM(OneKeyDeviceType) {
  OneKeyDeviceType_Classic = 0,
  OneKeyDeviceType_Classic1S = 1,
  OneKeyDeviceType_Mini = 2,
  OneKeyDeviceType_Touch = 3,
  OneKeyDeviceType_Pro = 5,
};

GPBEnumDescriptor *OneKeyDeviceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OneKeyDeviceType_IsValidValue(int32_t value);

#pragma mark - Enum OneKeySeType

typedef GPB_ENUM(OneKeySeType) {
  OneKeySeType_Thd89 = 0,
  OneKeySeType_Se608A = 1,
};

GPBEnumDescriptor *OneKeySeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OneKeySeType_IsValidValue(int32_t value);

#pragma mark - Enum OneKeySEState

typedef GPB_ENUM(OneKeySEState) {
  OneKeySEState_Boot = 0,
  OneKeySEState_App = 1,
};

GPBEnumDescriptor *OneKeySEState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OneKeySEState_IsValidValue(int32_t value);

#pragma mark - Enum Features_Capability

typedef GPB_ENUM(Features_Capability) {
  Features_Capability_CapabilityBitcoin = 1,

  /** Altcoins based on the Bitcoin source code */
  Features_Capability_CapabilityBitcoinLike = 2,
  Features_Capability_CapabilityBinance = 3,
  Features_Capability_CapabilityCardano = 4,

  /** generic crypto operations for GPG, SSH, etc. */
  Features_Capability_CapabilityCrypto = 5,
  Features_Capability_CapabilityEos = 6,
  Features_Capability_CapabilityEthereum = 7,
  Features_Capability_CapabilityLisk GPB_DEPRECATED_MSG("hw.trezor.messages.management.Features.Capability_Lisk is deprecated (see Features.proto).") = 8,
  Features_Capability_CapabilityMonero = 9,
  Features_Capability_CapabilityNem = 10,
  Features_Capability_CapabilityRipple = 11,
  Features_Capability_CapabilityStellar = 12,
  Features_Capability_CapabilityTezos = 13,
  Features_Capability_CapabilityU2F = 14,
  Features_Capability_CapabilityShamir = 15,
  Features_Capability_CapabilityShamirGroups = 16,

  /** the device is capable of passphrase entry directly on the device */
  Features_Capability_CapabilityPassphraseEntry = 17,
};

GPBEnumDescriptor *Features_Capability_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Features_Capability_IsValidValue(int32_t value);

#pragma mark - Enum ApplySettings_ExportType

/**
 * *
 * Type of seed and mnemonic export flag
 **/
typedef GPB_ENUM(ApplySettings_ExportType) {
  ApplySettings_ExportType_SeedEncExportTypeNo = 0,
  ApplySettings_ExportType_SeedEncExportTypeYes = 1,
  ApplySettings_ExportType_MnemonicPlainExportTypeYes = 2,
};

GPBEnumDescriptor *ApplySettings_ExportType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ApplySettings_ExportType_IsValidValue(int32_t value);

#pragma mark - Enum SdProtect_SdProtectOperationType

/**
 * *
 * Structure representing SD card protection operation
 **/
typedef GPB_ENUM(SdProtect_SdProtectOperationType) {
  SdProtect_SdProtectOperationType_Disable = 0,
  SdProtect_SdProtectOperationType_Enable = 1,
  SdProtect_SdProtectOperationType_Refresh = 2,
};

GPBEnumDescriptor *SdProtect_SdProtectOperationType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SdProtect_SdProtectOperationType_IsValidValue(int32_t value);

#pragma mark - Enum RecoveryDevice_RecoveryDeviceType

/**
 * *
 * Type of recovery procedure. These should be used as bitmask, e.g.,
 * `RecoveryDeviceType_ScrambledWords | RecoveryDeviceType_Matrix`
 * listing every method supported by the host computer.
 *
 * Note that ScrambledWords must be supported by every implementation
 * for backward compatibility; there is no way to not support it.
 **/
typedef GPB_ENUM(RecoveryDevice_RecoveryDeviceType) {
  /** use powers of two when extending this field */
  RecoveryDevice_RecoveryDeviceType_RecoveryDeviceTypeScrambledWords = 0,

  /** matrix recovery type */
  RecoveryDevice_RecoveryDeviceType_RecoveryDeviceTypeMatrix = 1,
};

GPBEnumDescriptor *RecoveryDevice_RecoveryDeviceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RecoveryDevice_RecoveryDeviceType_IsValidValue(int32_t value);

#pragma mark - Enum WordRequest_WordRequestType

/**
 * *
 * Type of Recovery Word request
 **/
typedef GPB_ENUM(WordRequest_WordRequestType) {
  WordRequest_WordRequestType_WordRequestTypePlain = 0,
  WordRequest_WordRequestType_WordRequestTypeMatrix9 = 1,
  WordRequest_WordRequestType_WordRequestTypeMatrix6 = 2,
};

GPBEnumDescriptor *WordRequest_WordRequestType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL WordRequest_WordRequestType_IsValidValue(int32_t value);

#pragma mark - Enum BixinSeedOperate_SeedRequestType

/**
 * *
 * Type of Seed request
 **/
typedef GPB_ENUM(BixinSeedOperate_SeedRequestType) {
  BixinSeedOperate_SeedRequestType_SeedRequestTypeGen = 0,
  BixinSeedOperate_SeedRequestType_SeedRequestTypeEncExport = 1,
  BixinSeedOperate_SeedRequestType_SeedRequestTypeEncImport = 2,
};

GPBEnumDescriptor *BixinSeedOperate_SeedRequestType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BixinSeedOperate_SeedRequestType_IsValidValue(int32_t value);

#pragma mark - Enum BixinWhiteListRequest_WL_OperationType

/**
 * *
 * Type of Seed request
 **/
typedef GPB_ENUM(BixinWhiteListRequest_WL_OperationType) {
  BixinWhiteListRequest_WL_OperationType_WlOperationTypeAdd = 0,
  BixinWhiteListRequest_WL_OperationType_WlOperationTypeDelete = 1,
  BixinWhiteListRequest_WL_OperationType_WlOperationTypeInquire = 2,
};

GPBEnumDescriptor *BixinWhiteListRequest_WL_OperationType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BixinWhiteListRequest_WL_OperationType_IsValidValue(int32_t value);

#pragma mark - Enum ResourceUpload_ResourceType

typedef GPB_ENUM(ResourceUpload_ResourceType) {
  ResourceUpload_ResourceType_WallPaper = 0,
  ResourceUpload_ResourceType_Nft = 1,
};

GPBEnumDescriptor *ResourceUpload_ResourceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ResourceUpload_ResourceType_IsValidValue(int32_t value);

#pragma mark - FeaturesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface FeaturesRoot : GPBRootObject
@end

#pragma mark - Initialize

typedef GPB_ENUM(Initialize_FieldNumber) {
  Initialize_FieldNumber_SessionId = 1,
  Initialize_FieldNumber_SkipPassphrase = 2,
  Initialize_FieldNumber_DeriveCardano = 3,
};

/**
 * *
 * Request: Reset device to default state and ask for device details
 * \@start
 * \@next Features
 **/
GPB_FINAL @interface Initialize : GPBMessage

/** assumed device session id; Trezor clears caches if it is different or empty */
@property(nonatomic, readwrite, copy, null_resettable) NSData *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

/** removed as part of passphrase redesign */
@property(nonatomic, readwrite) BOOL skipPassphrase GPB_DEPRECATED_MSG("hw.trezor.messages.management.Initialize._skip_passphrase is deprecated (see Features.proto).");
@property(nonatomic, readwrite) BOOL hasSkipPassphrase GPB_DEPRECATED_MSG("hw.trezor.messages.management.Initialize._skip_passphrase is deprecated (see Features.proto).");

/** whether to derive Cardano Icarus root keys in this session */
@property(nonatomic, readwrite) BOOL deriveCardano;
@property(nonatomic, readwrite) BOOL hasDeriveCardano;

@end

#pragma mark - GetFeatures

/**
 * *
 * Request: Ask for device details (no device reset)
 * \@start
 * \@next Features
 **/
GPB_FINAL @interface GetFeatures : GPBMessage

@end

#pragma mark - OnekeyGetFeatures

/**
 * *
 * Request: Ask for device details (no device reset)
 * \@start
 * \@next Features
 **/
GPB_FINAL @interface OnekeyGetFeatures : GPBMessage

@end

#pragma mark - Features

typedef GPB_ENUM(Features_FieldNumber) {
  Features_FieldNumber_Vendor = 1,
  Features_FieldNumber_MajorVersion = 2,
  Features_FieldNumber_MinorVersion = 3,
  Features_FieldNumber_PatchVersion = 4,
  Features_FieldNumber_BootloaderMode = 5,
  Features_FieldNumber_DeviceId = 6,
  Features_FieldNumber_PinProtection = 7,
  Features_FieldNumber_PassphraseProtection = 8,
  Features_FieldNumber_Language = 9,
  Features_FieldNumber_Label = 10,
  Features_FieldNumber_Initialized_p = 12,
  Features_FieldNumber_Revision = 13,
  Features_FieldNumber_BootloaderHash = 14,
  Features_FieldNumber_Imported = 15,
  Features_FieldNumber_Unlocked = 16,
  Features_FieldNumber_PassphraseCached = 17,
  Features_FieldNumber_FirmwarePresent = 18,
  Features_FieldNumber_NeedsBackup = 19,
  Features_FieldNumber_Flags = 20,
  Features_FieldNumber_Model = 21,
  Features_FieldNumber_FwMajor = 22,
  Features_FieldNumber_FwMinor = 23,
  Features_FieldNumber_FwPatch = 24,
  Features_FieldNumber_FwVendor = 25,
  Features_FieldNumber_UnfinishedBackup = 27,
  Features_FieldNumber_NoBackup = 28,
  Features_FieldNumber_RecoveryMode = 29,
  Features_FieldNumber_CapabilitiesArray = 30,
  Features_FieldNumber_BackupType = 31,
  Features_FieldNumber_SdCardPresent = 32,
  Features_FieldNumber_SdProtection = 33,
  Features_FieldNumber_WipeCodeProtection = 34,
  Features_FieldNumber_SessionId = 35,
  Features_FieldNumber_PassphraseAlwaysOnDevice = 36,
  Features_FieldNumber_SafetyChecks = 37,
  Features_FieldNumber_AutoLockDelayMs = 38,
  Features_FieldNumber_DisplayRotation = 39,
  Features_FieldNumber_ExperimentalFeatures = 40,
  Features_FieldNumber_Busy = 41,
  Features_FieldNumber_Offset = 500,
  Features_FieldNumber_BleName = 501,
  Features_FieldNumber_BleVer = 502,
  Features_FieldNumber_BleEnable = 503,
  Features_FieldNumber_SeEnable = 504,
  Features_FieldNumber_SeVer = 506,
  Features_FieldNumber_BackupOnly = 507,
  Features_FieldNumber_OnekeyVersion = 508,
  Features_FieldNumber_OnekeySerial = 509,
  Features_FieldNumber_BootloaderVersion = 510,
  Features_FieldNumber_SerialNo = 511,
  Features_FieldNumber_SpiFlash = 512,
  Features_FieldNumber_Initstates = 513,
  Features_FieldNumber_NftVoucher = 514,
  Features_FieldNumber_CpuInfo = 515,
  Features_FieldNumber_PreFirmware = 516,
  Features_FieldNumber_CoinSwitch = 517,
  Features_FieldNumber_BuildId = 518,
  Features_FieldNumber_BoardloaderVersion = 519,
  Features_FieldNumber_BatteryLevel = 520,
  Features_FieldNumber_OnekeyDeviceType = 600,
  Features_FieldNumber_OnekeySeType = 601,
  Features_FieldNumber_OnekeyBoardVersion = 602,
  Features_FieldNumber_OnekeyBoardHash = 603,
  Features_FieldNumber_OnekeyBootVersion = 604,
  Features_FieldNumber_OnekeyBootHash = 605,
  Features_FieldNumber_OnekeySe01Version = 606,
  Features_FieldNumber_OnekeySe01Hash = 607,
  Features_FieldNumber_OnekeySe01BuildId = 608,
  Features_FieldNumber_OnekeyFirmwareVersion = 609,
  Features_FieldNumber_OnekeyFirmwareHash = 610,
  Features_FieldNumber_OnekeyFirmwareBuildId = 611,
  Features_FieldNumber_OnekeySerialNo = 612,
  Features_FieldNumber_OnekeyBootBuildId = 613,
  Features_FieldNumber_OnekeyBleName = 614,
  Features_FieldNumber_OnekeyBleVersion = 615,
  Features_FieldNumber_OnekeyBleBuildId = 616,
  Features_FieldNumber_OnekeyBleHash = 617,
  Features_FieldNumber_OnekeySe02Version = 618,
  Features_FieldNumber_OnekeySe03Version = 619,
  Features_FieldNumber_OnekeySe04Version = 620,
  Features_FieldNumber_OnekeySe01State = 621,
  Features_FieldNumber_OnekeySe02State = 622,
  Features_FieldNumber_OnekeySe03State = 623,
  Features_FieldNumber_OnekeySe04State = 624,
};

/**
 * *
 * Response: Reports various information about the device
 * \@end
 **/
GPB_FINAL @interface Features : GPBMessage

/** name of the manufacturer, e.g. "trezor.io" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *vendor;
/** Test to see if @c vendor has been set. */
@property(nonatomic, readwrite) BOOL hasVendor;

/** major version of the firmware/bootloader, e.g. 1 */
@property(nonatomic, readwrite) uint32_t majorVersion;
@property(nonatomic, readwrite) BOOL hasMajorVersion;

/** minor version of the firmware/bootloader, e.g. 0 */
@property(nonatomic, readwrite) uint32_t minorVersion;
@property(nonatomic, readwrite) BOOL hasMinorVersion;

/** patch version of the firmware/bootloader, e.g. 0 */
@property(nonatomic, readwrite) uint32_t patchVersion;
@property(nonatomic, readwrite) BOOL hasPatchVersion;

/** is device in bootloader mode? */
@property(nonatomic, readwrite) BOOL bootloaderMode;
@property(nonatomic, readwrite) BOOL hasBootloaderMode;

/** device's unique identifier */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;
/** Test to see if @c deviceId has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceId;

/** is device protected by PIN? */
@property(nonatomic, readwrite) BOOL pinProtection;
@property(nonatomic, readwrite) BOOL hasPinProtection;

/** is node/mnemonic encrypted using passphrase? */
@property(nonatomic, readwrite) BOOL passphraseProtection;
@property(nonatomic, readwrite) BOOL hasPassphraseProtection;

/** device language */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

/** device description label */
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

/** does device contain seed? */
@property(nonatomic, readwrite) BOOL initialized_p;
@property(nonatomic, readwrite) BOOL hasInitialized_p;

/** SCM revision of firmware */
@property(nonatomic, readwrite, copy, null_resettable) NSData *revision;
/** Test to see if @c revision has been set. */
@property(nonatomic, readwrite) BOOL hasRevision;

/** hash of the bootloader */
@property(nonatomic, readwrite, copy, null_resettable) NSData *bootloaderHash;
/** Test to see if @c bootloaderHash has been set. */
@property(nonatomic, readwrite) BOOL hasBootloaderHash;

/** was storage imported from an external source? */
@property(nonatomic, readwrite) BOOL imported;
@property(nonatomic, readwrite) BOOL hasImported;

/** is the device unlocked? called "pin_cached" previously */
@property(nonatomic, readwrite) BOOL unlocked;
@property(nonatomic, readwrite) BOOL hasUnlocked;

/** is passphrase already cached in session? */
@property(nonatomic, readwrite) BOOL passphraseCached GPB_DEPRECATED_MSG("hw.trezor.messages.management.Features._passphrase_cached is deprecated (see Features.proto).");
@property(nonatomic, readwrite) BOOL hasPassphraseCached GPB_DEPRECATED_MSG("hw.trezor.messages.management.Features._passphrase_cached is deprecated (see Features.proto).");

/** is valid firmware loaded? */
@property(nonatomic, readwrite) BOOL firmwarePresent;
@property(nonatomic, readwrite) BOOL hasFirmwarePresent;

/** does storage need backup? (equals to Storage.needs_backup) */
@property(nonatomic, readwrite) BOOL needsBackup;
@property(nonatomic, readwrite) BOOL hasNeedsBackup;

/** device flags (equals to Storage.flags) */
@property(nonatomic, readwrite) uint32_t flags;
@property(nonatomic, readwrite) BOOL hasFlags;

/** device hardware model */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;
/** Test to see if @c model has been set. */
@property(nonatomic, readwrite) BOOL hasModel;

/** reported firmware version if in bootloader mode */
@property(nonatomic, readwrite) uint32_t fwMajor;
@property(nonatomic, readwrite) BOOL hasFwMajor;

/** reported firmware version if in bootloader mode */
@property(nonatomic, readwrite) uint32_t fwMinor;
@property(nonatomic, readwrite) BOOL hasFwMinor;

/** reported firmware version if in bootloader mode */
@property(nonatomic, readwrite) uint32_t fwPatch;
@property(nonatomic, readwrite) BOOL hasFwPatch;

/** reported firmware vendor if in bootloader mode */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fwVendor;
/** Test to see if @c fwVendor has been set. */
@property(nonatomic, readwrite) BOOL hasFwVendor;

/** optional bytes fw_vendor_keys = 26;      // obsoleted, use fw_vendor */
@property(nonatomic, readwrite) BOOL unfinishedBackup;
@property(nonatomic, readwrite) BOOL hasUnfinishedBackup;

/** report no backup (equals to Storage.no_backup) */
@property(nonatomic, readwrite) BOOL noBackup;
@property(nonatomic, readwrite) BOOL hasNoBackup;

/** is recovery mode in progress */
@property(nonatomic, readwrite) BOOL recoveryMode;
@property(nonatomic, readwrite) BOOL hasRecoveryMode;

/** list of supported capabilities */
// |capabilitiesArray| contains |Features_Capability|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *capabilitiesArray;
/** The number of items in @c capabilitiesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger capabilitiesArray_Count;

/** type of device backup (BIP-39 / SLIP-39 basic / SLIP-39 advanced) */
@property(nonatomic, readwrite) BackupType backupType;
@property(nonatomic, readwrite) BOOL hasBackupType;

/** is SD card present */
@property(nonatomic, readwrite) BOOL sdCardPresent;
@property(nonatomic, readwrite) BOOL hasSdCardPresent;

/** is SD Protect enabled */
@property(nonatomic, readwrite) BOOL sdProtection;
@property(nonatomic, readwrite) BOOL hasSdProtection;

/** is wipe code protection enabled */
@property(nonatomic, readwrite) BOOL wipeCodeProtection;
@property(nonatomic, readwrite) BOOL hasWipeCodeProtection;

@property(nonatomic, readwrite, copy, null_resettable) NSData *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

/** device enforces passphrase entry on Trezor */
@property(nonatomic, readwrite) BOOL passphraseAlwaysOnDevice;
@property(nonatomic, readwrite) BOOL hasPassphraseAlwaysOnDevice;

/** safety check level, set to Prompt to limit path namespace enforcement */
@property(nonatomic, readwrite) SafetyCheckLevel safetyChecks;
@property(nonatomic, readwrite) BOOL hasSafetyChecks;

/** number of milliseconds after which the device locks itself */
@property(nonatomic, readwrite) uint32_t autoLockDelayMs;
@property(nonatomic, readwrite) BOOL hasAutoLockDelayMs;

/** in degrees from North */
@property(nonatomic, readwrite) uint32_t displayRotation;
@property(nonatomic, readwrite) BOOL hasDisplayRotation;

/** are experimental message types enabled? */
@property(nonatomic, readwrite) BOOL experimentalFeatures;
@property(nonatomic, readwrite) BOOL hasExperimentalFeatures;

/** is the device busy, showing "Do not disconnect"? */
@property(nonatomic, readwrite) BOOL busy;
@property(nonatomic, readwrite) BOOL hasBusy;

@property(nonatomic, readwrite) uint32_t offset;
@property(nonatomic, readwrite) BOOL hasOffset;

/** OneKey BLE name */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bleName;
/** Test to see if @c bleName has been set. */
@property(nonatomic, readwrite) BOOL hasBleName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bleVer;
/** Test to see if @c bleVer has been set. */
@property(nonatomic, readwrite) BOOL hasBleVer;

@property(nonatomic, readwrite) BOOL bleEnable;
@property(nonatomic, readwrite) BOOL hasBleEnable;

@property(nonatomic, readwrite) BOOL seEnable;
@property(nonatomic, readwrite) BOOL hasSeEnable;

@property(nonatomic, readwrite, copy, null_resettable) NSString *seVer;
/** Test to see if @c seVer has been set. */
@property(nonatomic, readwrite) BOOL hasSeVer;

@property(nonatomic, readwrite) BOOL backupOnly;
@property(nonatomic, readwrite) BOOL hasBackupOnly;

/** OneKey version */
@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyVersion;
/** Test to see if @c onekeyVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySerial;
/** Test to see if @c onekeySerial has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySerial;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bootloaderVersion;
/** Test to see if @c bootloaderVersion has been set. */
@property(nonatomic, readwrite) BOOL hasBootloaderVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *serialNo;
/** Test to see if @c serialNo has been set. */
@property(nonatomic, readwrite) BOOL hasSerialNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *spiFlash;
/** Test to see if @c spiFlash has been set. */
@property(nonatomic, readwrite) BOOL hasSpiFlash;

/** list of facotry state */
@property(nonatomic, readwrite) uint32_t initstates;
@property(nonatomic, readwrite) BOOL hasInitstates;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nftVoucher;
/** Test to see if @c nftVoucher has been set. */
@property(nonatomic, readwrite) BOOL hasNftVoucher;

@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuInfo;
/** Test to see if @c cpuInfo has been set. */
@property(nonatomic, readwrite) BOOL hasCpuInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *preFirmware;
/** Test to see if @c preFirmware has been set. */
@property(nonatomic, readwrite) BOOL hasPreFirmware;

@property(nonatomic, readwrite) uint32_t coinSwitch;
@property(nonatomic, readwrite) BOOL hasCoinSwitch;

@property(nonatomic, readwrite, copy, null_resettable) NSData *buildId;
/** Test to see if @c buildId has been set. */
@property(nonatomic, readwrite) BOOL hasBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *boardloaderVersion;
/** Test to see if @c boardloaderVersion has been set. */
@property(nonatomic, readwrite) BOOL hasBoardloaderVersion;

@property(nonatomic, readwrite) uint32_t batteryLevel;
@property(nonatomic, readwrite) BOOL hasBatteryLevel;

@property(nonatomic, readwrite) OneKeyDeviceType onekeyDeviceType;
@property(nonatomic, readwrite) BOOL hasOnekeyDeviceType;

@property(nonatomic, readwrite) OneKeySeType onekeySeType;
@property(nonatomic, readwrite) BOOL hasOnekeySeType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBoardVersion;
/** Test to see if @c onekeyBoardVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBoardVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBoardHash;
/** Test to see if @c onekeyBoardHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBoardHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBootVersion;
/** Test to see if @c onekeyBootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBootHash;
/** Test to see if @c onekeyBootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01Version;
/** Test to see if @c onekeySe01Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01Version;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe01Hash;
/** Test to see if @c onekeySe01Hash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01Hash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01BuildId;
/** Test to see if @c onekeySe01BuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01BuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyFirmwareVersion;
/** Test to see if @c onekeyFirmwareVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyFirmwareHash;
/** Test to see if @c onekeyFirmwareHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyFirmwareBuildId;
/** Test to see if @c onekeyFirmwareBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySerialNo;
/** Test to see if @c onekeySerialNo has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySerialNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBootBuildId;
/** Test to see if @c onekeyBootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleName;
/** Test to see if @c onekeyBleName has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleVersion;
/** Test to see if @c onekeyBleVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleBuildId;
/** Test to see if @c onekeyBleBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBleHash;
/** Test to see if @c onekeyBleHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe02Version;
/** Test to see if @c onekeySe02Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02Version;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe03Version;
/** Test to see if @c onekeySe03Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03Version;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe04Version;
/** Test to see if @c onekeySe04Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04Version;

@property(nonatomic, readwrite) OneKeySEState onekeySe01State;
@property(nonatomic, readwrite) BOOL hasOnekeySe01State;

@property(nonatomic, readwrite) OneKeySEState onekeySe02State;
@property(nonatomic, readwrite) BOOL hasOnekeySe02State;

@property(nonatomic, readwrite) OneKeySEState onekeySe03State;
@property(nonatomic, readwrite) BOOL hasOnekeySe03State;

@property(nonatomic, readwrite) OneKeySEState onekeySe04State;
@property(nonatomic, readwrite) BOOL hasOnekeySe04State;

@end

#pragma mark - OnekeyFeatures

typedef GPB_ENUM(OnekeyFeatures_FieldNumber) {
  OnekeyFeatures_FieldNumber_OnekeyDeviceType = 1,
  OnekeyFeatures_FieldNumber_OnekeyBoardVersion = 2,
  OnekeyFeatures_FieldNumber_OnekeyBootVersion = 3,
  OnekeyFeatures_FieldNumber_OnekeyFirmwareVersion = 4,
  OnekeyFeatures_FieldNumber_OnekeyBoardHash = 5,
  OnekeyFeatures_FieldNumber_OnekeyBootHash = 6,
  OnekeyFeatures_FieldNumber_OnekeyFirmwareHash = 7,
  OnekeyFeatures_FieldNumber_OnekeyBoardBuildId = 8,
  OnekeyFeatures_FieldNumber_OnekeyBootBuildId = 9,
  OnekeyFeatures_FieldNumber_OnekeyFirmwareBuildId = 10,
  OnekeyFeatures_FieldNumber_OnekeySerialNo = 11,
  OnekeyFeatures_FieldNumber_OnekeyBleName = 12,
  OnekeyFeatures_FieldNumber_OnekeyBleVersion = 13,
  OnekeyFeatures_FieldNumber_OnekeyBleBuildId = 14,
  OnekeyFeatures_FieldNumber_OnekeyBleHash = 15,
  OnekeyFeatures_FieldNumber_OnekeySeType = 16,
  OnekeyFeatures_FieldNumber_OnekeySe01State = 17,
  OnekeyFeatures_FieldNumber_OnekeySe02State = 18,
  OnekeyFeatures_FieldNumber_OnekeySe03State = 19,
  OnekeyFeatures_FieldNumber_OnekeySe04State = 20,
  OnekeyFeatures_FieldNumber_OnekeySe01Version = 21,
  OnekeyFeatures_FieldNumber_OnekeySe02Version = 22,
  OnekeyFeatures_FieldNumber_OnekeySe03Version = 23,
  OnekeyFeatures_FieldNumber_OnekeySe04Version = 24,
  OnekeyFeatures_FieldNumber_OnekeySe01Hash = 25,
  OnekeyFeatures_FieldNumber_OnekeySe02Hash = 26,
  OnekeyFeatures_FieldNumber_OnekeySe03Hash = 27,
  OnekeyFeatures_FieldNumber_OnekeySe04Hash = 28,
  OnekeyFeatures_FieldNumber_OnekeySe01BuildId = 29,
  OnekeyFeatures_FieldNumber_OnekeySe02BuildId = 30,
  OnekeyFeatures_FieldNumber_OnekeySe03BuildId = 31,
  OnekeyFeatures_FieldNumber_OnekeySe04BuildId = 32,
  OnekeyFeatures_FieldNumber_OnekeySe01BootVersion = 33,
  OnekeyFeatures_FieldNumber_OnekeySe02BootVersion = 34,
  OnekeyFeatures_FieldNumber_OnekeySe03BootVersion = 35,
  OnekeyFeatures_FieldNumber_OnekeySe04BootVersion = 36,
  OnekeyFeatures_FieldNumber_OnekeySe01BootHash = 37,
  OnekeyFeatures_FieldNumber_OnekeySe02BootHash = 38,
  OnekeyFeatures_FieldNumber_OnekeySe03BootHash = 39,
  OnekeyFeatures_FieldNumber_OnekeySe04BootHash = 40,
  OnekeyFeatures_FieldNumber_OnekeySe01BootBuildId = 41,
  OnekeyFeatures_FieldNumber_OnekeySe02BootBuildId = 42,
  OnekeyFeatures_FieldNumber_OnekeySe03BootBuildId = 43,
  OnekeyFeatures_FieldNumber_OnekeySe04BootBuildId = 44,
};

/**
 * *
 * Response: Reports various information about the device
 * \@end
 **/
GPB_FINAL @interface OnekeyFeatures : GPBMessage

@property(nonatomic, readwrite) OneKeyDeviceType onekeyDeviceType;
@property(nonatomic, readwrite) BOOL hasOnekeyDeviceType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBoardVersion;
/** Test to see if @c onekeyBoardVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBoardVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBootVersion;
/** Test to see if @c onekeyBootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyFirmwareVersion;
/** Test to see if @c onekeyFirmwareVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBoardHash;
/** Test to see if @c onekeyBoardHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBoardHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBootHash;
/** Test to see if @c onekeyBootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyFirmwareHash;
/** Test to see if @c onekeyFirmwareHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBoardBuildId;
/** Test to see if @c onekeyBoardBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBoardBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBootBuildId;
/** Test to see if @c onekeyBootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBootBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyFirmwareBuildId;
/** Test to see if @c onekeyFirmwareBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyFirmwareBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySerialNo;
/** Test to see if @c onekeySerialNo has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySerialNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleName;
/** Test to see if @c onekeyBleName has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleVersion;
/** Test to see if @c onekeyBleVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeyBleBuildId;
/** Test to see if @c onekeyBleBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeyBleHash;
/** Test to see if @c onekeyBleHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeyBleHash;

@property(nonatomic, readwrite) OneKeySeType onekeySeType;
@property(nonatomic, readwrite) BOOL hasOnekeySeType;

@property(nonatomic, readwrite) OneKeySEState onekeySe01State;
@property(nonatomic, readwrite) BOOL hasOnekeySe01State;

@property(nonatomic, readwrite) OneKeySEState onekeySe02State;
@property(nonatomic, readwrite) BOOL hasOnekeySe02State;

@property(nonatomic, readwrite) OneKeySEState onekeySe03State;
@property(nonatomic, readwrite) BOOL hasOnekeySe03State;

@property(nonatomic, readwrite) OneKeySEState onekeySe04State;
@property(nonatomic, readwrite) BOOL hasOnekeySe04State;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01Version;
/** Test to see if @c onekeySe01Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01Version;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe02Version;
/** Test to see if @c onekeySe02Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02Version;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe03Version;
/** Test to see if @c onekeySe03Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03Version;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe04Version;
/** Test to see if @c onekeySe04Version has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04Version;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe01Hash;
/** Test to see if @c onekeySe01Hash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01Hash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe02Hash;
/** Test to see if @c onekeySe02Hash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02Hash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe03Hash;
/** Test to see if @c onekeySe03Hash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03Hash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe04Hash;
/** Test to see if @c onekeySe04Hash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04Hash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01BuildId;
/** Test to see if @c onekeySe01BuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01BuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe02BuildId;
/** Test to see if @c onekeySe02BuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02BuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe03BuildId;
/** Test to see if @c onekeySe03BuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03BuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe04BuildId;
/** Test to see if @c onekeySe04BuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04BuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01BootVersion;
/** Test to see if @c onekeySe01BootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01BootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe02BootVersion;
/** Test to see if @c onekeySe02BootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02BootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe03BootVersion;
/** Test to see if @c onekeySe03BootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03BootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe04BootVersion;
/** Test to see if @c onekeySe04BootVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04BootVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe01BootHash;
/** Test to see if @c onekeySe01BootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01BootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe02BootHash;
/** Test to see if @c onekeySe02BootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02BootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe03BootHash;
/** Test to see if @c onekeySe03BootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03BootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *onekeySe04BootHash;
/** Test to see if @c onekeySe04BootHash has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04BootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe01BootBuildId;
/** Test to see if @c onekeySe01BootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe01BootBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe02BootBuildId;
/** Test to see if @c onekeySe02BootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe02BootBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe03BootBuildId;
/** Test to see if @c onekeySe03BootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe03BootBuildId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *onekeySe04BootBuildId;
/** Test to see if @c onekeySe04BootBuildId has been set. */
@property(nonatomic, readwrite) BOOL hasOnekeySe04BootBuildId;

@end

#pragma mark - LockDevice

/**
 * *
 * Request: soft-lock the device. Following actions will require PIN. Passphrases remain cached.
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface LockDevice : GPBMessage

@end

#pragma mark - EndSession

/**
 * *
 * Request: end the current sesson. Following actions must call Initialize again.
 * Cache for the current session is discarded, other sessions remain intact.
 * Device is not PIN-locked.
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface EndSession : GPBMessage

@end

#pragma mark - ApplySettings

typedef GPB_ENUM(ApplySettings_FieldNumber) {
  ApplySettings_FieldNumber_Language = 1,
  ApplySettings_FieldNumber_Label = 2,
  ApplySettings_FieldNumber_UsePassphrase = 3,
  ApplySettings_FieldNumber_Homescreen = 4,
  ApplySettings_FieldNumber_PassphraseSource = 5,
  ApplySettings_FieldNumber_AutoLockDelayMs = 6,
  ApplySettings_FieldNumber_DisplayRotation = 7,
  ApplySettings_FieldNumber_PassphraseAlwaysOnDevice = 8,
  ApplySettings_FieldNumber_SafetyChecks = 9,
  ApplySettings_FieldNumber_ExperimentalFeatures = 10,
  ApplySettings_FieldNumber_UseBle = 100,
  ApplySettings_FieldNumber_UseSe = 101,
  ApplySettings_FieldNumber_IsBixinapp = 102,
  ApplySettings_FieldNumber_FastpayPin = 103,
  ApplySettings_FieldNumber_FastpayConfirm = 104,
  ApplySettings_FieldNumber_FastpayMoneyLimit = 105,
  ApplySettings_FieldNumber_FastpayTimes = 106,
};

/**
 * *
 * Request: change language and/or label of the device
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ApplySettings : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

@property(nonatomic, readwrite) BOOL usePassphrase;
@property(nonatomic, readwrite) BOOL hasUsePassphrase;

@property(nonatomic, readwrite, copy, null_resettable) NSData *homescreen;
/** Test to see if @c homescreen has been set. */
@property(nonatomic, readwrite) BOOL hasHomescreen;

/** ASK = 0; DEVICE = 1; HOST = 2; */
@property(nonatomic, readwrite) uint32_t passphraseSource GPB_DEPRECATED_MSG("hw.trezor.messages.management.ApplySettings._passphrase_source is deprecated (see Features.proto).");
@property(nonatomic, readwrite) BOOL hasPassphraseSource GPB_DEPRECATED_MSG("hw.trezor.messages.management.ApplySettings._passphrase_source is deprecated (see Features.proto).");

@property(nonatomic, readwrite) uint32_t autoLockDelayMs;
@property(nonatomic, readwrite) BOOL hasAutoLockDelayMs;

/** in degrees from North */
@property(nonatomic, readwrite) uint32_t displayRotation;
@property(nonatomic, readwrite) BOOL hasDisplayRotation;

/** do not prompt for passphrase, enforce device entry */
@property(nonatomic, readwrite) BOOL passphraseAlwaysOnDevice;
@property(nonatomic, readwrite) BOOL hasPassphraseAlwaysOnDevice;

/** Safety check level, set to Prompt to limit path namespace enforcement */
@property(nonatomic, readwrite) SafetyCheckLevel safetyChecks;
@property(nonatomic, readwrite) BOOL hasSafetyChecks;

/** enable experimental message types */
@property(nonatomic, readwrite) BOOL experimentalFeatures;
@property(nonatomic, readwrite) BOOL hasExperimentalFeatures;

@property(nonatomic, readwrite) BOOL useBle;
@property(nonatomic, readwrite) BOOL hasUseBle;

@property(nonatomic, readwrite) BOOL useSe;
@property(nonatomic, readwrite) BOOL hasUseSe;

@property(nonatomic, readwrite) BOOL isBixinapp;
@property(nonatomic, readwrite) BOOL hasIsBixinapp;

@property(nonatomic, readwrite) BOOL fastpayPin;
@property(nonatomic, readwrite) BOOL hasFastpayPin;

@property(nonatomic, readwrite) BOOL fastpayConfirm;
@property(nonatomic, readwrite) BOOL hasFastpayConfirm;

@property(nonatomic, readwrite) uint64_t fastpayMoneyLimit;
@property(nonatomic, readwrite) BOOL hasFastpayMoneyLimit;

@property(nonatomic, readwrite) uint32_t fastpayTimes;
@property(nonatomic, readwrite) BOOL hasFastpayTimes;

@end

#pragma mark - ApplyFlags

typedef GPB_ENUM(ApplyFlags_FieldNumber) {
  ApplyFlags_FieldNumber_Flags = 1,
};

/**
 * *
 * Request: set flags of the device
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ApplyFlags : GPBMessage

/** bitmask, can only set bits, not unset */
@property(nonatomic, readwrite) uint32_t flags;
@property(nonatomic, readwrite) BOOL hasFlags;

@end

#pragma mark - ChangePin

typedef GPB_ENUM(ChangePin_FieldNumber) {
  ChangePin_FieldNumber_Remove = 1,
};

/**
 * *
 * Request: Starts workflow for setting/changing/removing the PIN
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ChangePin : GPBMessage

/** is PIN removal requested? */
@property(nonatomic, readwrite) BOOL remove;
@property(nonatomic, readwrite) BOOL hasRemove;

@end

#pragma mark - ChangeWipeCode

typedef GPB_ENUM(ChangeWipeCode_FieldNumber) {
  ChangeWipeCode_FieldNumber_Remove = 1,
};

/**
 * *
 * Request: Starts workflow for setting/removing the wipe code
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ChangeWipeCode : GPBMessage

/** is wipe code removal requested? */
@property(nonatomic, readwrite) BOOL remove;
@property(nonatomic, readwrite) BOOL hasRemove;

@end

#pragma mark - SdProtect

typedef GPB_ENUM(SdProtect_FieldNumber) {
  SdProtect_FieldNumber_Operation = 1,
};

/**
 * *
 * Request: Starts workflow for enabling/regenerating/disabling SD card protection
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface SdProtect : GPBMessage

@property(nonatomic, readwrite) SdProtect_SdProtectOperationType operation;
@property(nonatomic, readwrite) BOOL hasOperation;

@end

#pragma mark - Ping

typedef GPB_ENUM(Ping_FieldNumber) {
  Ping_FieldNumber_Message = 1,
  Ping_FieldNumber_ButtonProtection = 2,
};

/**
 * *
 * Request: Test if the device is alive, device sends back the message in Success response
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface Ping : GPBMessage

/** message to send back in Success message */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/** ask for button press */
@property(nonatomic, readwrite) BOOL buttonProtection;
@property(nonatomic, readwrite) BOOL hasButtonProtection;

@end

#pragma mark - Cancel

/**
 * *
 * Request: Abort last operation that required user interaction
 * \@start
 * \@next Failure
 **/
GPB_FINAL @interface Cancel : GPBMessage

@end

#pragma mark - GetEntropy

typedef GPB_ENUM(GetEntropy_FieldNumber) {
  GetEntropy_FieldNumber_Size = 1,
};

/**
 * *
 * Request: Request a sample of random data generated by hardware RNG. May be used for testing.
 * \@start
 * \@next Entropy
 * \@next Failure
 **/
GPB_FINAL @interface GetEntropy : GPBMessage

/** size of requested entropy */
@property(nonatomic, readwrite) uint32_t size;
@property(nonatomic, readwrite) BOOL hasSize;

@end

#pragma mark - Entropy

typedef GPB_ENUM(Entropy_FieldNumber) {
  Entropy_FieldNumber_Entropy = 1,
};

/**
 * *
 * Response: Reply with random data generated by internal RNG
 * \@end
 **/
GPB_FINAL @interface Entropy : GPBMessage

/** chunk of random generated bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *entropy;
/** Test to see if @c entropy has been set. */
@property(nonatomic, readwrite) BOOL hasEntropy;

@end

#pragma mark - WipeDevice

/**
 * *
 * Request: Request device to wipe all sensitive data and settings
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface WipeDevice : GPBMessage

@end

#pragma mark - LoadDevice

typedef GPB_ENUM(LoadDevice_FieldNumber) {
  LoadDevice_FieldNumber_MnemonicsArray = 1,
  LoadDevice_FieldNumber_Pin = 3,
  LoadDevice_FieldNumber_PassphraseProtection = 4,
  LoadDevice_FieldNumber_Language = 5,
  LoadDevice_FieldNumber_Label = 6,
  LoadDevice_FieldNumber_SkipChecksum = 7,
  LoadDevice_FieldNumber_U2FCounter = 8,
  LoadDevice_FieldNumber_NeedsBackup = 9,
  LoadDevice_FieldNumber_NoBackup = 10,
};

/**
 * *
 * Request: Load seed and related internal settings from the computer
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface LoadDevice : GPBMessage

/** seed encoded as mnemonic (12, 18 or 24 words for BIP39, 20 or 33 for SLIP39) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *mnemonicsArray;
/** The number of items in @c mnemonicsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger mnemonicsArray_Count;

/** set PIN protection */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pin;
/** Test to see if @c pin has been set. */
@property(nonatomic, readwrite) BOOL hasPin;

/** enable master node encryption using passphrase */
@property(nonatomic, readwrite) BOOL passphraseProtection;
@property(nonatomic, readwrite) BOOL hasPassphraseProtection;

/** device language (IETF BCP 47 language tag) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

/** device label */
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

/** do not test mnemonic for valid BIP-39 checksum */
@property(nonatomic, readwrite) BOOL skipChecksum;
@property(nonatomic, readwrite) BOOL hasSkipChecksum;

/** U2F counter */
@property(nonatomic, readwrite) uint32_t u2FCounter;
@property(nonatomic, readwrite) BOOL hasU2FCounter;

/** set "needs backup" flag */
@property(nonatomic, readwrite) BOOL needsBackup;
@property(nonatomic, readwrite) BOOL hasNeedsBackup;

/** indicate that no backup is going to be made */
@property(nonatomic, readwrite) BOOL noBackup;
@property(nonatomic, readwrite) BOOL hasNoBackup;

@end

#pragma mark - ResetDevice

typedef GPB_ENUM(ResetDevice_FieldNumber) {
  ResetDevice_FieldNumber_DisplayRandom = 1,
  ResetDevice_FieldNumber_Strength = 2,
  ResetDevice_FieldNumber_PassphraseProtection = 3,
  ResetDevice_FieldNumber_PinProtection = 4,
  ResetDevice_FieldNumber_Language = 5,
  ResetDevice_FieldNumber_Label = 6,
  ResetDevice_FieldNumber_U2FCounter = 7,
  ResetDevice_FieldNumber_SkipBackup = 8,
  ResetDevice_FieldNumber_NoBackup = 9,
  ResetDevice_FieldNumber_BackupType = 10,
};

/**
 * *
 * Request: Ask device to do initialization involving user interaction
 * \@start
 * \@next EntropyRequest
 * \@next Failure
 **/
GPB_FINAL @interface ResetDevice : GPBMessage

/** display entropy generated by the device before asking for additional entropy */
@property(nonatomic, readwrite) BOOL displayRandom;
@property(nonatomic, readwrite) BOOL hasDisplayRandom;

/** strength of seed in bits */
@property(nonatomic, readwrite) uint32_t strength;
@property(nonatomic, readwrite) BOOL hasStrength;

/** enable master node encryption using passphrase */
@property(nonatomic, readwrite) BOOL passphraseProtection;
@property(nonatomic, readwrite) BOOL hasPassphraseProtection;

/** enable PIN protection */
@property(nonatomic, readwrite) BOOL pinProtection;
@property(nonatomic, readwrite) BOOL hasPinProtection;

/** device language (IETF BCP 47 language tag) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

/** device label */
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

/** U2F counter */
@property(nonatomic, readwrite) uint32_t u2FCounter;
@property(nonatomic, readwrite) BOOL hasU2FCounter;

/** postpone seed backup to BackupDevice workflow */
@property(nonatomic, readwrite) BOOL skipBackup;
@property(nonatomic, readwrite) BOOL hasSkipBackup;

/** indicate that no backup is going to be made */
@property(nonatomic, readwrite) BOOL noBackup;
@property(nonatomic, readwrite) BOOL hasNoBackup;

/** type of the mnemonic backup */
@property(nonatomic, readwrite) BackupType backupType;
@property(nonatomic, readwrite) BOOL hasBackupType;

@end

#pragma mark - BackupDevice

/**
 * *
 * Request: Perform backup of the device seed if not backed up using ResetDevice
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface BackupDevice : GPBMessage

@end

#pragma mark - EntropyRequest

/**
 * *
 * Response: Ask for additional entropy from host computer
 * \@next EntropyAck
 **/
GPB_FINAL @interface EntropyRequest : GPBMessage

@end

#pragma mark - EntropyAck

typedef GPB_ENUM(EntropyAck_FieldNumber) {
  EntropyAck_FieldNumber_Entropy = 1,
};

/**
 * *
 * Request: Provide additional entropy for seed generation function
 * \@next Success
 **/
GPB_FINAL @interface EntropyAck : GPBMessage

/** 256 bits (32 bytes) of random data */
@property(nonatomic, readwrite, copy, null_resettable) NSData *entropy;
/** Test to see if @c entropy has been set. */
@property(nonatomic, readwrite) BOOL hasEntropy;

@end

#pragma mark - RecoveryDevice

typedef GPB_ENUM(RecoveryDevice_FieldNumber) {
  RecoveryDevice_FieldNumber_WordCount = 1,
  RecoveryDevice_FieldNumber_PassphraseProtection = 2,
  RecoveryDevice_FieldNumber_PinProtection = 3,
  RecoveryDevice_FieldNumber_Language = 4,
  RecoveryDevice_FieldNumber_Label = 5,
  RecoveryDevice_FieldNumber_EnforceWordlist = 6,
  RecoveryDevice_FieldNumber_Type = 8,
  RecoveryDevice_FieldNumber_U2FCounter = 9,
  RecoveryDevice_FieldNumber_DryRun = 10,
};

/**
 * *
 * Request: Start recovery workflow asking user for specific words of mnemonic
 * Used to recovery device safely even on untrusted computer.
 * \@start
 * \@next WordRequest
 **/
GPB_FINAL @interface RecoveryDevice : GPBMessage

/** number of words in BIP-39 mnemonic */
@property(nonatomic, readwrite) uint32_t wordCount;
@property(nonatomic, readwrite) BOOL hasWordCount;

/** enable master node encryption using passphrase */
@property(nonatomic, readwrite) BOOL passphraseProtection;
@property(nonatomic, readwrite) BOOL hasPassphraseProtection;

/** enable PIN protection */
@property(nonatomic, readwrite) BOOL pinProtection;
@property(nonatomic, readwrite) BOOL hasPinProtection;

/** device language (IETF BCP 47 language tag) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

/** device label */
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

/** enforce BIP-39 wordlist during the process */
@property(nonatomic, readwrite) BOOL enforceWordlist;
@property(nonatomic, readwrite) BOOL hasEnforceWordlist;

/** 7 reserved for unused recovery method */
@property(nonatomic, readwrite) RecoveryDevice_RecoveryDeviceType type;
@property(nonatomic, readwrite) BOOL hasType;

/** U2F counter */
@property(nonatomic, readwrite) uint32_t u2FCounter;
@property(nonatomic, readwrite) BOOL hasU2FCounter;

/** perform dry-run recovery workflow (for safe mnemonic validation) */
@property(nonatomic, readwrite) BOOL dryRun;
@property(nonatomic, readwrite) BOOL hasDryRun;

@end

#pragma mark - WordRequest

typedef GPB_ENUM(WordRequest_FieldNumber) {
  WordRequest_FieldNumber_Type = 1,
};

/**
 * *
 * Response: Device is waiting for user to enter word of the mnemonic
 * Its position is shown only on device's internal display.
 * \@next WordAck
 **/
GPB_FINAL @interface WordRequest : GPBMessage

@property(nonatomic, readwrite) WordRequest_WordRequestType type;
@property(nonatomic, readwrite) BOOL hasType;

@end

#pragma mark - WordAck

typedef GPB_ENUM(WordAck_FieldNumber) {
  WordAck_FieldNumber_Word = 1,
};

/**
 * *
 * Request: Computer replies with word from the mnemonic
 * \@next WordRequest
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface WordAck : GPBMessage

/** one word of mnemonic on asked position */
@property(nonatomic, readwrite, copy, null_resettable) NSString *word;
/** Test to see if @c word has been set. */
@property(nonatomic, readwrite) BOOL hasWord;

@end

#pragma mark - SetU2FCounter

typedef GPB_ENUM(SetU2FCounter_FieldNumber) {
  SetU2FCounter_FieldNumber_U2FCounter = 1,
};

/**
 * *
 * Request: Set U2F counter
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface SetU2FCounter : GPBMessage

@property(nonatomic, readwrite) uint32_t u2FCounter;
@property(nonatomic, readwrite) BOOL hasU2FCounter;

@end

#pragma mark - GetNextU2FCounter

/**
 * *
 * Request: Set U2F counter
 * \@start
 * \@next NextU2FCounter
 **/
GPB_FINAL @interface GetNextU2FCounter : GPBMessage

@end

#pragma mark - NextU2FCounter

typedef GPB_ENUM(NextU2FCounter_FieldNumber) {
  NextU2FCounter_FieldNumber_U2FCounter = 1,
};

/**
 * *
 * Request: Set U2F counter
 * \@end
 **/
GPB_FINAL @interface NextU2FCounter : GPBMessage

@property(nonatomic, readwrite) uint32_t u2FCounter;
@property(nonatomic, readwrite) BOOL hasU2FCounter;

@end

#pragma mark - DoPreauthorized

/**
 * *
 * Request: Ask device to prepare for a preauthorized operation.
 * \@start
 * \@next PreauthorizedRequest
 * \@next Failure
 **/
GPB_FINAL @interface DoPreauthorized : GPBMessage

@end

#pragma mark - PreauthorizedRequest

/**
 * *
 * Request: Device awaits a preauthorized operation.
 * \@start
 * \@next SignTx
 * \@next GetOwnershipProof
 **/
GPB_FINAL @interface PreauthorizedRequest : GPBMessage

@end

#pragma mark - CancelAuthorization

/**
 * *
 * Request: Cancel any outstanding authorization in the current session.
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface CancelAuthorization : GPBMessage

@end

#pragma mark - BixinSeedOperate

typedef GPB_ENUM(BixinSeedOperate_FieldNumber) {
  BixinSeedOperate_FieldNumber_Type = 1,
  BixinSeedOperate_FieldNumber_SeedImportData = 2,
};

/**
 * *
 * Request: Gen bitcon seeds random or seed encypt import and export
 * \@end
 **/
GPB_FINAL @interface BixinSeedOperate : GPBMessage

@property(nonatomic, readwrite) BixinSeedOperate_SeedRequestType type;
@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSData *seedImportData;
/** Test to see if @c seedImportData has been set. */
@property(nonatomic, readwrite) BOOL hasSeedImportData;

@end

#pragma mark - BixinMessageSE

typedef GPB_ENUM(BixinMessageSE_FieldNumber) {
  BixinMessageSE_FieldNumber_Inputmessage = 1,
};

/**
 * *
 * Request: message is se some cmd
 * \@end
 **/
GPB_FINAL @interface BixinMessageSE : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *inputmessage;
/** Test to see if @c inputmessage has been set. */
@property(nonatomic, readwrite) BOOL hasInputmessage;

@end

#pragma mark - BixinOutMessageSE

typedef GPB_ENUM(BixinOutMessageSE_FieldNumber) {
  BixinOutMessageSE_FieldNumber_Outmessage = 1,
};

/**
 * *
 * Request: out se cmd result
 * \@end
 **/
GPB_FINAL @interface BixinOutMessageSE : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *outmessage;
/** Test to see if @c outmessage has been set. */
@property(nonatomic, readwrite) BOOL hasOutmessage;

@end

#pragma mark - DeviceBackToBoot

/**
 * *
 * Request: Reboot firmware
 * \@end
 **/
GPB_FINAL @interface DeviceBackToBoot : GPBMessage

@end

#pragma mark - BixinBackupRequest

/**
 * *
 * Request: backup request
 * \@end
 **/
GPB_FINAL @interface BixinBackupRequest : GPBMessage

@end

#pragma mark - BixinBackupAck

typedef GPB_ENUM(BixinBackupAck_FieldNumber) {
  BixinBackupAck_FieldNumber_Data_p = 1,
};

/**
 * *
 * Request: backup ack
 * \@end
 **/
GPB_FINAL @interface BixinBackupAck : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - BixinRestoreRequest

typedef GPB_ENUM(BixinRestoreRequest_FieldNumber) {
  BixinRestoreRequest_FieldNumber_Data_p = 1,
  BixinRestoreRequest_FieldNumber_Language = 2,
  BixinRestoreRequest_FieldNumber_Label = 3,
  BixinRestoreRequest_FieldNumber_PassphraseProtection = 4,
};

/**
 * *
 * Request: restore request
 * \@end
 **/
GPB_FINAL @interface BixinRestoreRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

@property(nonatomic, readwrite) BOOL passphraseProtection;
@property(nonatomic, readwrite) BOOL hasPassphraseProtection;

@end

#pragma mark - BixinRestoreAck

typedef GPB_ENUM(BixinRestoreAck_FieldNumber) {
  BixinRestoreAck_FieldNumber_Data_p = 1,
};

/**
 * *
 * Request: restore ack
 * \@end
 **/
GPB_FINAL @interface BixinRestoreAck : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - BixinVerifyDeviceRequest

typedef GPB_ENUM(BixinVerifyDeviceRequest_FieldNumber) {
  BixinVerifyDeviceRequest_FieldNumber_Data_p = 1,
};

/**
 * *
 * Request: verify device request
 * \@end
 **/
GPB_FINAL @interface BixinVerifyDeviceRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - BixinVerifyDeviceAck

typedef GPB_ENUM(BixinVerifyDeviceAck_FieldNumber) {
  BixinVerifyDeviceAck_FieldNumber_Cert = 1,
  BixinVerifyDeviceAck_FieldNumber_Signature = 2,
};

/**
 * *
 * Request: verify device ack
 * \@end
 **/
GPB_FINAL @interface BixinVerifyDeviceAck : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *cert;
/** Test to see if @c cert has been set. */
@property(nonatomic, readwrite) BOOL hasCert;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

#pragma mark - BixinWhiteListRequest

typedef GPB_ENUM(BixinWhiteListRequest_FieldNumber) {
  BixinWhiteListRequest_FieldNumber_Type = 1,
  BixinWhiteListRequest_FieldNumber_AddrIn = 2,
};

/**
 * *
 * Request: bixin white list operation
 * \@end
 **/
GPB_FINAL @interface BixinWhiteListRequest : GPBMessage

@property(nonatomic, readwrite) BixinWhiteListRequest_WL_OperationType type;
@property(nonatomic, readwrite) BOOL hasType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *addrIn;
/** Test to see if @c addrIn has been set. */
@property(nonatomic, readwrite) BOOL hasAddrIn;

@end

#pragma mark - BixinWhiteListAck

typedef GPB_ENUM(BixinWhiteListAck_FieldNumber) {
  BixinWhiteListAck_FieldNumber_AddressArray = 1,
};

/**
 * *
 * Response: output whitelist
 * \@end
 **/
GPB_FINAL @interface BixinWhiteListAck : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressArray;
/** The number of items in @c addressArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger addressArray_Count;

@end

#pragma mark - BixinLoadDevice

typedef GPB_ENUM(BixinLoadDevice_FieldNumber) {
  BixinLoadDevice_FieldNumber_Mnemonics = 1,
  BixinLoadDevice_FieldNumber_Language = 5,
  BixinLoadDevice_FieldNumber_Label = 6,
  BixinLoadDevice_FieldNumber_SkipChecksum = 7,
};

/**
 * *
 * Request: Import mnemonics
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface BixinLoadDevice : GPBMessage

/** seed encoded as mnemonic (12, 18 or 24 words for BIP39, 20 or 33 for SLIP39) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mnemonics;
/** Test to see if @c mnemonics has been set. */
@property(nonatomic, readwrite) BOOL hasMnemonics;

/** device language (IETF BCP 47 language tag) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

/** device label */
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;
/** Test to see if @c label has been set. */
@property(nonatomic, readwrite) BOOL hasLabel;

/** do not test mnemonic for valid BIP-39 checksum */
@property(nonatomic, readwrite) BOOL skipChecksum;
@property(nonatomic, readwrite) BOOL hasSkipChecksum;

@end

#pragma mark - BixinBackupDevice

/**
 * *
 * Request: Request export mnemonics
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface BixinBackupDevice : GPBMessage

@end

#pragma mark - BixinBackupDeviceAck

typedef GPB_ENUM(BixinBackupDeviceAck_FieldNumber) {
  BixinBackupDeviceAck_FieldNumber_Mnemonics = 1,
};

/**
 * *
 * Response: mnemonics
 * \@end
 **/
GPB_FINAL @interface BixinBackupDeviceAck : GPBMessage

/** seed encoded as mnemonic (12, 18 or 24 words for BIP39, 20 or 33 for SLIP39) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mnemonics;
/** Test to see if @c mnemonics has been set. */
@property(nonatomic, readwrite) BOOL hasMnemonics;

@end

#pragma mark - DeviceInfoSettings

typedef GPB_ENUM(DeviceInfoSettings_FieldNumber) {
  DeviceInfoSettings_FieldNumber_SerialNo = 1,
  DeviceInfoSettings_FieldNumber_CpuInfo = 2,
  DeviceInfoSettings_FieldNumber_PreFirmware = 3,
};

/**
 * *
 * Request: device information settings
 * \@start
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface DeviceInfoSettings : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *serialNo;
/** Test to see if @c serialNo has been set. */
@property(nonatomic, readwrite) BOOL hasSerialNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuInfo;
/** Test to see if @c cpuInfo has been set. */
@property(nonatomic, readwrite) BOOL hasCpuInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *preFirmware;
/** Test to see if @c preFirmware has been set. */
@property(nonatomic, readwrite) BOOL hasPreFirmware;

@end

#pragma mark - GetDeviceInfo

/**
 * *
 * Request: Ask for device details (no device reset)
 * \@start
 * \@next Features
 **/
GPB_FINAL @interface GetDeviceInfo : GPBMessage

@end

#pragma mark - DeviceInfo

typedef GPB_ENUM(DeviceInfo_FieldNumber) {
  DeviceInfo_FieldNumber_SerialNo = 1,
  DeviceInfo_FieldNumber_SpiFlashInfo = 2,
  DeviceInfo_FieldNumber_SeInfo = 3,
  DeviceInfo_FieldNumber_NftVoucher = 4,
  DeviceInfo_FieldNumber_CpuInfo = 5,
  DeviceInfo_FieldNumber_PreFirmware = 6,
};

/**
 * *
 * Response: Reports various information about the device
 * \@end
 **/
GPB_FINAL @interface DeviceInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *serialNo;
/** Test to see if @c serialNo has been set. */
@property(nonatomic, readwrite) BOOL hasSerialNo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *spiFlashInfo;
/** Test to see if @c spiFlashInfo has been set. */
@property(nonatomic, readwrite) BOOL hasSpiFlashInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *seInfo;
/** Test to see if @c seInfo has been set. */
@property(nonatomic, readwrite) BOOL hasSeInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nftVoucher;
/** Test to see if @c nftVoucher has been set. */
@property(nonatomic, readwrite) BOOL hasNftVoucher;

@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuInfo;
/** Test to see if @c cpuInfo has been set. */
@property(nonatomic, readwrite) BOOL hasCpuInfo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *preFirmware;
/** Test to see if @c preFirmware has been set. */
@property(nonatomic, readwrite) BOOL hasPreFirmware;

@end

#pragma mark - ReadSEPublicKey

/**
 * *
 * Request: Read SE public key
 * \@end
 **/
GPB_FINAL @interface ReadSEPublicKey : GPBMessage

@end

#pragma mark - SEPublicKey

typedef GPB_ENUM(SEPublicKey_FieldNumber) {
  SEPublicKey_FieldNumber_PublicKey = 1,
};

/**
 * *
 * Response: SE public key
 * \@end
 **/
GPB_FINAL @interface SEPublicKey : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;
/** Test to see if @c publicKey has been set. */
@property(nonatomic, readwrite) BOOL hasPublicKey;

@end

#pragma mark - WriteSEPublicCert

typedef GPB_ENUM(WriteSEPublicCert_FieldNumber) {
  WriteSEPublicCert_FieldNumber_PublicCert = 1,
};

/**
 * *
 * Request: Write SE public certificate
 * \@end
 **/
GPB_FINAL @interface WriteSEPublicCert : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *publicCert;
/** Test to see if @c publicCert has been set. */
@property(nonatomic, readwrite) BOOL hasPublicCert;

@end

#pragma mark - ReadSEPublicCert

/**
 * *
 * Request: Read SE public certificate
 * \@end
 **/
GPB_FINAL @interface ReadSEPublicCert : GPBMessage

@end

#pragma mark - SEPublicCert

typedef GPB_ENUM(SEPublicCert_FieldNumber) {
  SEPublicCert_FieldNumber_PublicCert = 1,
};

/**
 * *
 * Response: SE public certificate
 * \@end
 **/
GPB_FINAL @interface SEPublicCert : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *publicCert;
/** Test to see if @c publicCert has been set. */
@property(nonatomic, readwrite) BOOL hasPublicCert;

@end

#pragma mark - SpiFlashWrite

typedef GPB_ENUM(SpiFlashWrite_FieldNumber) {
  SpiFlashWrite_FieldNumber_Address = 1,
  SpiFlashWrite_FieldNumber_Data_p = 2,
};

/**
 * *
 * Request: Write spi_flash data
 * \@end
 **/
GPB_FINAL @interface SpiFlashWrite : GPBMessage

@property(nonatomic, readwrite) uint32_t address;
@property(nonatomic, readwrite) BOOL hasAddress;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - SpiFlashRead

typedef GPB_ENUM(SpiFlashRead_FieldNumber) {
  SpiFlashRead_FieldNumber_Address = 1,
  SpiFlashRead_FieldNumber_Len = 2,
};

/**
 * *
 * Request: Read spi_flash data
 * \@end
 **/
GPB_FINAL @interface SpiFlashRead : GPBMessage

@property(nonatomic, readwrite) uint32_t address;
@property(nonatomic, readwrite) BOOL hasAddress;

@property(nonatomic, readwrite) uint32_t len;
@property(nonatomic, readwrite) BOOL hasLen;

@end

#pragma mark - SpiFlashData

typedef GPB_ENUM(SpiFlashData_FieldNumber) {
  SpiFlashData_FieldNumber_Data_p = 1,
};

/**
 * *
 * Response: spi_flash data
 * \@end
 **/
GPB_FINAL @interface SpiFlashData : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - SESignMessage

typedef GPB_ENUM(SESignMessage_FieldNumber) {
  SESignMessage_FieldNumber_Message = 1,
};

/**
 * *
 * Request:SE sign message
 * \@end
 **/
GPB_FINAL @interface SESignMessage : GPBMessage

/** message to be signed */
@property(nonatomic, readwrite, copy, null_resettable) NSData *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@end

#pragma mark - SEMessageSignature

typedef GPB_ENUM(SEMessageSignature_FieldNumber) {
  SEMessageSignature_FieldNumber_Signature = 1,
};

/**
 * *
 * Response: Signed message
 * \@end
 **/
GPB_FINAL @interface SEMessageSignature : GPBMessage

/** signature of the message */
@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;
/** Test to see if @c signature has been set. */
@property(nonatomic, readwrite) BOOL hasSignature;

@end

#pragma mark - ResourceUpload

typedef GPB_ENUM(ResourceUpload_FieldNumber) {
  ResourceUpload_FieldNumber_Extension = 1,
  ResourceUpload_FieldNumber_DataLength = 2,
  ResourceUpload_FieldNumber_ResType = 3,
  ResourceUpload_FieldNumber_NftMetaData = 4,
  ResourceUpload_FieldNumber_ZoomDataLength = 5,
  ResourceUpload_FieldNumber_FileNameNoExt = 6,
};

/**
 * *
 * Request: Ask for uoload resource to device (wallpaper/nft pics, mp4)
 * \@next ResourceRequest
 * \@next ZoomRequest
 * \@next Failure
 **/
GPB_FINAL @interface ResourceUpload : GPBMessage

/** the extension of the resource */
@property(nonatomic, readwrite, copy, null_resettable) NSString *extension;
/** Test to see if @c extension has been set. */
@property(nonatomic, readwrite) BOOL hasExtension;

/** total length of the data to be upload */
@property(nonatomic, readwrite) uint32_t dataLength;
@property(nonatomic, readwrite) BOOL hasDataLength;

@property(nonatomic, readwrite) ResourceUpload_ResourceType resType;
@property(nonatomic, readwrite) BOOL hasResType;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nftMetaData;
/** Test to see if @c nftMetaData has been set. */
@property(nonatomic, readwrite) BOOL hasNftMetaData;

@property(nonatomic, readwrite) uint32_t zoomDataLength;
@property(nonatomic, readwrite) BOOL hasZoomDataLength;

/** name template: nft/wp - mac(unique verify) - timestamp(sort) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileNameNoExt;
/** Test to see if @c fileNameNoExt has been set. */
@property(nonatomic, readwrite) BOOL hasFileNameNoExt;

@end

#pragma mark - ZoomRequest

typedef GPB_ENUM(ZoomRequest_FieldNumber) {
  ZoomRequest_FieldNumber_Offset = 1,
  ZoomRequest_FieldNumber_DataLength = 2,
};

/**
 * *
 * Response: Device asks for more data
 * \@next ResourceAck
 **/
GPB_FINAL @interface ZoomRequest : GPBMessage

/** offset of requested data chunk */
@property(nonatomic, readwrite) uint32_t offset;
@property(nonatomic, readwrite) BOOL hasOffset;

/** length of requested data chunk */
@property(nonatomic, readwrite) uint32_t dataLength;
@property(nonatomic, readwrite) BOOL hasDataLength;

@end

#pragma mark - ResourceRequest

typedef GPB_ENUM(ResourceRequest_FieldNumber) {
  ResourceRequest_FieldNumber_Offset = 1,
  ResourceRequest_FieldNumber_DataLength = 2,
};

/**
 * *
 * Response: Device asks for more data
 * \@next ResourceAck
 **/
GPB_FINAL @interface ResourceRequest : GPBMessage

/** offset of requested data chunk */
@property(nonatomic, readwrite) uint32_t offset;
@property(nonatomic, readwrite) BOOL hasOffset;

/** length of requested data chunk */
@property(nonatomic, readwrite) uint32_t dataLength;
@property(nonatomic, readwrite) BOOL hasDataLength;

@end

#pragma mark - ResourceAck

typedef GPB_ENUM(ResourceAck_FieldNumber) {
  ResourceAck_FieldNumber_DataChunk = 1,
  ResourceAck_FieldNumber_Hash_p = 2,
};

/**
 * *
 * Request: Send resource in binary form to the device
 * \@next ResourceRequest
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ResourceAck : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *dataChunk;
/** Test to see if @c dataChunk has been set. */
@property(nonatomic, readwrite) BOOL hasDataChunk;

/**  the hash of the data_chunk */
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;
/** Test to see if @c hash_p has been set. */
@property(nonatomic, readwrite) BOOL hasHash_p;

@end

#pragma mark - ResourceUpdate

typedef GPB_ENUM(ResourceUpdate_FieldNumber) {
  ResourceUpdate_FieldNumber_FileName = 1,
  ResourceUpdate_FieldNumber_DataLength = 2,
  ResourceUpdate_FieldNumber_InitialDataChunk = 3,
  ResourceUpdate_FieldNumber_Hash_p = 4,
};

/**
 * *
 * Request: Ask for update the internal static resource on device
 * \@next ResourceRequest
 * \@next Success
 * \@next Failure
 **/
GPB_FINAL @interface ResourceUpdate : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *fileName;
/** Test to see if @c fileName has been set. */
@property(nonatomic, readwrite) BOOL hasFileName;

@property(nonatomic, readwrite) uint32_t dataLength;
@property(nonatomic, readwrite) BOOL hasDataLength;

/** <= 16K */
@property(nonatomic, readwrite, copy, null_resettable) NSData *initialDataChunk;
/** Test to see if @c initialDataChunk has been set. */
@property(nonatomic, readwrite) BOOL hasInitialDataChunk;

@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;
/** Test to see if @c hash_p has been set. */
@property(nonatomic, readwrite) BOOL hasHash_p;

@end

#pragma mark - NFTWriteInfo

typedef GPB_ENUM(NFTWriteInfo_FieldNumber) {
  NFTWriteInfo_FieldNumber_Index = 1,
  NFTWriteInfo_FieldNumber_Width = 2,
  NFTWriteInfo_FieldNumber_Height = 3,
  NFTWriteInfo_FieldNumber_NameZh = 4,
  NFTWriteInfo_FieldNumber_NameEn = 5,
};

/**
 * *
 * Request: Write NFT picture information
 * \@end
 **/
GPB_FINAL @interface NFTWriteInfo : GPBMessage

@property(nonatomic, readwrite) uint32_t index;
@property(nonatomic, readwrite) BOOL hasIndex;

@property(nonatomic, readwrite) uint32_t width;
@property(nonatomic, readwrite) BOOL hasWidth;

@property(nonatomic, readwrite) uint32_t height;
@property(nonatomic, readwrite) BOOL hasHeight;

@property(nonatomic, readwrite, copy, null_resettable) NSString *nameZh;
/** Test to see if @c nameZh has been set. */
@property(nonatomic, readwrite) BOOL hasNameZh;

@property(nonatomic, readwrite, copy, null_resettable) NSString *nameEn;
/** Test to see if @c nameEn has been set. */
@property(nonatomic, readwrite) BOOL hasNameEn;

@end

#pragma mark - NFTWriteData

typedef GPB_ENUM(NFTWriteData_FieldNumber) {
  NFTWriteData_FieldNumber_Index = 1,
  NFTWriteData_FieldNumber_Data_p = 2,
  NFTWriteData_FieldNumber_Offset = 3,
};

/**
 * *
 * Request: Write NFT picture data
 * \@end
 **/
GPB_FINAL @interface NFTWriteData : GPBMessage

@property(nonatomic, readwrite) uint32_t index;
@property(nonatomic, readwrite) BOOL hasIndex;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@property(nonatomic, readwrite) uint32_t offset;
@property(nonatomic, readwrite) BOOL hasOffset;

@end

#pragma mark - RebootToBootloader

/**
 * *
 * Request: Reboot firmware to bootloader
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface RebootToBootloader : GPBMessage

@end

#pragma mark - RebootToBoardloader

/**
 * *
 * Request: Reboot firmware to boardloader
 * \@start
 * \@next Success
 **/
GPB_FINAL @interface RebootToBoardloader : GPBMessage

@end

#pragma mark - ListResDir

typedef GPB_ENUM(ListResDir_FieldNumber) {
  ListResDir_FieldNumber_Path = 1,
};

/**
 * *
 * Request: the path of dir to enum
 * \@next FileNameList
 * \@next Failure
 **/
GPB_FINAL @interface ListResDir : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *path;
/** Test to see if @c path has been set. */
@property(nonatomic, readwrite) BOOL hasPath;

@end

#pragma mark - FileInfoList

typedef GPB_ENUM(FileInfoList_FieldNumber) {
  FileInfoList_FieldNumber_FilesArray = 1,
};

/**
 * *
 * Response: The file info list of the dir
 * \@end
 **/
GPB_FINAL @interface FileInfoList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<FileInfoList_FileInfo*> *filesArray;
/** The number of items in @c filesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger filesArray_Count;

@end

#pragma mark - FileInfoList_FileInfo

typedef GPB_ENUM(FileInfoList_FileInfo_FieldNumber) {
  FileInfoList_FileInfo_FieldNumber_Name = 1,
  FileInfoList_FileInfo_FieldNumber_Size = 2,
};

GPB_FINAL @interface FileInfoList_FileInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite) uint64_t size;
@property(nonatomic, readwrite) BOOL hasSize;

@end

#pragma mark - DeviceEraseSector

typedef GPB_ENUM(DeviceEraseSector_FieldNumber) {
  DeviceEraseSector_FieldNumber_Sector = 1,
};

/**
 * *
 * Request: Erase device sector
 * \@end
 **/
GPB_FINAL @interface DeviceEraseSector : GPBMessage

@property(nonatomic, readwrite) uint32_t sector;
@property(nonatomic, readwrite) BOOL hasSector;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
