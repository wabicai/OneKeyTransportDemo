// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: messages-common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Failure_FailureType

typedef GPB_ENUM(Failure_FailureType) {
  Failure_FailureType_FailureUnexpectedMessage = 1,
  Failure_FailureType_FailureButtonExpected = 2,
  Failure_FailureType_FailureDataError = 3,
  Failure_FailureType_FailureActionCancelled = 4,
  Failure_FailureType_FailurePinExpected = 5,
  Failure_FailureType_FailurePinCancelled = 6,
  Failure_FailureType_FailurePinInvalid = 7,
  Failure_FailureType_FailureInvalidSignature = 8,
  Failure_FailureType_FailureProcessError = 9,
  Failure_FailureType_FailureNotEnoughFunds = 10,
  Failure_FailureType_FailureNotInitialized = 11,
  Failure_FailureType_FailurePinMismatch = 12,
  Failure_FailureType_FailureWipeCodeMismatch = 13,
  Failure_FailureType_FailureInvalidSession = 14,
  Failure_FailureType_FailureFirmwareError = 99,
};

GPBEnumDescriptor *Failure_FailureType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Failure_FailureType_IsValidValue(int32_t value);

#pragma mark - Enum ButtonRequest_ButtonRequestType

/**
 * *
 * Type of button request
 **/
typedef GPB_ENUM(ButtonRequest_ButtonRequestType) {
  ButtonRequest_ButtonRequestType_ButtonRequestOther = 1,
  ButtonRequest_ButtonRequestType_ButtonRequestFeeOverThreshold = 2,
  ButtonRequest_ButtonRequestType_ButtonRequestConfirmOutput = 3,
  ButtonRequest_ButtonRequestType_ButtonRequestResetDevice = 4,
  ButtonRequest_ButtonRequestType_ButtonRequestConfirmWord = 5,
  ButtonRequest_ButtonRequestType_ButtonRequestWipeDevice = 6,
  ButtonRequest_ButtonRequestType_ButtonRequestProtectCall = 7,
  ButtonRequest_ButtonRequestType_ButtonRequestSignTx = 8,
  ButtonRequest_ButtonRequestType_ButtonRequestFirmwareCheck = 9,
  ButtonRequest_ButtonRequestType_ButtonRequestAddress = 10,
  ButtonRequest_ButtonRequestType_ButtonRequestPublicKey = 11,
  ButtonRequest_ButtonRequestType_ButtonRequestMnemonicWordCount = 12,
  ButtonRequest_ButtonRequestType_ButtonRequestMnemonicInput = 13,
  ButtonRequest_ButtonRequestType_DeprecatedButtonRequestPassphraseType GPB_DEPRECATED_MSG("hw.trezor.messages.common.ButtonRequest._Deprecated_ButtonRequest_PassphraseType is deprecated (see messages-common.proto).") = 14,
  ButtonRequest_ButtonRequestType_ButtonRequestUnknownDerivationPath = 15,
  ButtonRequest_ButtonRequestType_ButtonRequestRecoveryHomepage = 16,
  ButtonRequest_ButtonRequestType_ButtonRequestSuccess = 17,
  ButtonRequest_ButtonRequestType_ButtonRequestWarning = 18,
  ButtonRequest_ButtonRequestType_ButtonRequestPassphraseEntry = 19,
  ButtonRequest_ButtonRequestType_ButtonRequestPinEntry = 20,
};

GPBEnumDescriptor *ButtonRequest_ButtonRequestType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ButtonRequest_ButtonRequestType_IsValidValue(int32_t value);

#pragma mark - Enum PinMatrixRequest_PinMatrixRequestType

/**
 * *
 * Type of PIN request
 **/
typedef GPB_ENUM(PinMatrixRequest_PinMatrixRequestType) {
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeCurrent = 1,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeNewFirst = 2,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeNewSecond = 3,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeWipeCodeFirst = 4,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeWipeCodeSecond = 5,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeBackupFirst = 6,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestTypeBackupSecond = 7,
};

GPBEnumDescriptor *PinMatrixRequest_PinMatrixRequestType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PinMatrixRequest_PinMatrixRequestType_IsValidValue(int32_t value);

#pragma mark - MessagesCommonRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MessagesCommonRoot : GPBRootObject
@end

#pragma mark - Success

typedef GPB_ENUM(Success_FieldNumber) {
  Success_FieldNumber_Message = 1,
};

/**
 * *
 * Response: Success of the previous request
 * \@end
 **/
GPB_FINAL @interface Success : GPBMessage

/** human readable description of action or request-specific payload */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@end

#pragma mark - Failure

typedef GPB_ENUM(Failure_FieldNumber) {
  Failure_FieldNumber_Code = 1,
  Failure_FieldNumber_Message = 2,
};

/**
 * *
 * Response: Failure of the previous request
 * \@end
 **/
GPB_FINAL @interface Failure : GPBMessage

/** computer-readable definition of the error state */
@property(nonatomic, readwrite) Failure_FailureType code;
@property(nonatomic, readwrite) BOOL hasCode;

/** human-readable message of the error state */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@end

#pragma mark - ButtonRequest

typedef GPB_ENUM(ButtonRequest_FieldNumber) {
  ButtonRequest_FieldNumber_Code = 1,
  ButtonRequest_FieldNumber_Pages = 2,
};

/**
 * *
 * Response: Device is waiting for HW button press.
 * \@auxstart
 * \@next ButtonAck
 **/
GPB_FINAL @interface ButtonRequest : GPBMessage

/** enum identifier of the screen */
@property(nonatomic, readwrite) ButtonRequest_ButtonRequestType code;
@property(nonatomic, readwrite) BOOL hasCode;

/** if the screen is paginated, number of pages */
@property(nonatomic, readwrite) uint32_t pages;
@property(nonatomic, readwrite) BOOL hasPages;

@end

#pragma mark - ButtonAck

/**
 * *
 * Request: Computer agrees to wait for HW button press
 * \@auxend
 **/
GPB_FINAL @interface ButtonAck : GPBMessage

@end

#pragma mark - PinMatrixRequest

typedef GPB_ENUM(PinMatrixRequest_FieldNumber) {
  PinMatrixRequest_FieldNumber_Type = 1,
};

/**
 * *
 * Response: Device is asking computer to show PIN matrix and awaits PIN encoded using this matrix scheme
 * \@auxstart
 * \@next PinMatrixAck
 **/
GPB_FINAL @interface PinMatrixRequest : GPBMessage

@property(nonatomic, readwrite) PinMatrixRequest_PinMatrixRequestType type;
@property(nonatomic, readwrite) BOOL hasType;

@end

#pragma mark - PinMatrixAck

typedef GPB_ENUM(PinMatrixAck_FieldNumber) {
  PinMatrixAck_FieldNumber_Pin = 1,
  PinMatrixAck_FieldNumber_NewPin = 2,
};

/**
 * *
 * Request: Computer responds with encoded PIN
 * \@auxend
 **/
GPB_FINAL @interface PinMatrixAck : GPBMessage

/** matrix encoded PIN entered by user */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pin;
/** Test to see if @c pin has been set. */
@property(nonatomic, readwrite) BOOL hasPin;

/** matrix encoded PIN entered by user */
@property(nonatomic, readwrite, copy, null_resettable) NSString *newPin NS_RETURNS_NOT_RETAINED;
/** Test to see if @c newPin has been set. */
@property(nonatomic, readwrite) BOOL hasNewPin;

@end

#pragma mark - PassphraseRequest

typedef GPB_ENUM(PassphraseRequest_FieldNumber) {
  PassphraseRequest_FieldNumber_OnDevice = 1,
};

/**
 * *
 * Response: Device awaits encryption passphrase
 * \@auxstart
 * \@next PassphraseAck
 **/
GPB_FINAL @interface PassphraseRequest : GPBMessage

/** <2.3.0 */
@property(nonatomic, readwrite) BOOL onDevice GPB_DEPRECATED_MSG("hw.trezor.messages.common.PassphraseRequest._on_device is deprecated (see messages-common.proto).");
@property(nonatomic, readwrite) BOOL hasOnDevice GPB_DEPRECATED_MSG("hw.trezor.messages.common.PassphraseRequest._on_device is deprecated (see messages-common.proto).");

@end

#pragma mark - PassphraseAck

typedef GPB_ENUM(PassphraseAck_FieldNumber) {
  PassphraseAck_FieldNumber_Passphrase = 1,
  PassphraseAck_FieldNumber_State = 2,
  PassphraseAck_FieldNumber_OnDevice = 3,
};

/**
 * *
 * Request: Send passphrase back
 * \@auxend
 **/
GPB_FINAL @interface PassphraseAck : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *passphrase;
/** Test to see if @c passphrase has been set. */
@property(nonatomic, readwrite) BOOL hasPassphrase;

/** <2.3.0 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *state GPB_DEPRECATED_MSG("hw.trezor.messages.common.PassphraseAck._state is deprecated (see messages-common.proto).");
/** Test to see if @c state has been set. */
@property(nonatomic, readwrite) BOOL hasState GPB_DEPRECATED_MSG("hw.trezor.messages.common.PassphraseAck._state is deprecated (see messages-common.proto).");

/** user wants to enter passphrase on the device */
@property(nonatomic, readwrite) BOOL onDevice;
@property(nonatomic, readwrite) BOOL hasOnDevice;

@end

#pragma mark - Deprecated_PassphraseStateRequest

typedef GPB_ENUM(Deprecated_PassphraseStateRequest_FieldNumber) {
  Deprecated_PassphraseStateRequest_FieldNumber_State = 1,
};

/**
 * *
 * Response: Device awaits passphrase state
 * Deprecated in 2.3.0
 * \@next Deprecated_PassphraseStateAck
 **/
GPB_DEPRECATED_MSG("hw.trezor.messages.common.Deprecated_PassphraseStateRequest is deprecated (see messages-common.proto).")
GPB_FINAL @interface Deprecated_PassphraseStateRequest : GPBMessage

/** actual device state */
@property(nonatomic, readwrite, copy, null_resettable) NSData *state;
/** Test to see if @c state has been set. */
@property(nonatomic, readwrite) BOOL hasState;

@end

#pragma mark - Deprecated_PassphraseStateAck

/**
 * *
 * Request: Send passphrase state back
 * Deprecated in 2.3.0
 * \@auxend
 **/
GPB_DEPRECATED_MSG("hw.trezor.messages.common.Deprecated_PassphraseStateAck is deprecated (see messages-common.proto).")
GPB_FINAL @interface Deprecated_PassphraseStateAck : GPBMessage

@end

#pragma mark - HDNodeType

typedef GPB_ENUM(HDNodeType_FieldNumber) {
  HDNodeType_FieldNumber_Depth = 1,
  HDNodeType_FieldNumber_Fingerprint = 2,
  HDNodeType_FieldNumber_ChildNum = 3,
  HDNodeType_FieldNumber_ChainCode = 4,
  HDNodeType_FieldNumber_PrivateKey = 5,
  HDNodeType_FieldNumber_PublicKey = 6,
};

/**
 * *
 * Structure representing BIP32 (hierarchical deterministic) node
 * Used for imports of private key into the device and exporting public key out of device
 * \@embed
 **/
GPB_FINAL @interface HDNodeType : GPBMessage

@property(nonatomic, readwrite) uint32_t depth;
@property(nonatomic, readwrite) BOOL hasDepth;

@property(nonatomic, readwrite) uint32_t fingerprint;
@property(nonatomic, readwrite) BOOL hasFingerprint;

@property(nonatomic, readwrite) uint32_t childNum;
@property(nonatomic, readwrite) BOOL hasChildNum;

@property(nonatomic, readwrite, copy, null_resettable) NSData *chainCode;
/** Test to see if @c chainCode has been set. */
@property(nonatomic, readwrite) BOOL hasChainCode;

@property(nonatomic, readwrite, copy, null_resettable) NSData *privateKey;
/** Test to see if @c privateKey has been set. */
@property(nonatomic, readwrite) BOOL hasPrivateKey;

@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;
/** Test to see if @c publicKey has been set. */
@property(nonatomic, readwrite) BOOL hasPublicKey;

@end

#pragma mark - BixinPinInputOnDevice

/**
 * *
 * Request:
 * \@auxend
 **/
GPB_FINAL @interface BixinPinInputOnDevice : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
