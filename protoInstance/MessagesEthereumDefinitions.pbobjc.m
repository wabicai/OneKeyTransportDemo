// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: messages-ethereum-definitions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "MessagesEthereumDefinitions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(EthereumDefinitions);
GPBObjCClassDeclaration(EthereumNetworkInfo);
GPBObjCClassDeclaration(EthereumTokenInfo);

#pragma mark - MessagesEthereumDefinitionsRoot

@implementation MessagesEthereumDefinitionsRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription MessagesEthereumDefinitionsRoot_FileDescription = {
  .package = "hw.trezor.messages.ethereum_definitions",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto2
};

#pragma mark - Enum EthereumDefinitionType

GPBEnumDescriptor *EthereumDefinitionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Network\000Token\000";
    static const int32_t values[] = {
        EthereumDefinitionType_Network,
        EthereumDefinitionType_Token,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EthereumDefinitionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EthereumDefinitionType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_IsClosed];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EthereumDefinitionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case EthereumDefinitionType_Network:
    case EthereumDefinitionType_Token:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - EthereumNetworkInfo

@implementation EthereumNetworkInfo

@dynamic hasChainId, chainId;
@dynamic hasSymbol, symbol;
@dynamic hasSlip44, slip44;
@dynamic hasName, name;
@dynamic hasIcon, icon;
@dynamic hasPrimaryColor, primaryColor;

typedef struct EthereumNetworkInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t slip44;
  NSString *symbol;
  NSString *name;
  NSString *icon;
  uint64_t chainId;
  uint64_t primaryColor;
} EthereumNetworkInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_ChainId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, chainId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "symbol",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_Symbol,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, symbol),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slip44",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_Slip44,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, slip44),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_Icon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "primaryColor",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumNetworkInfo_FieldNumber_PrimaryColor,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EthereumNetworkInfo__storage_, primaryColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EthereumNetworkInfo)
                                   messageName:@"EthereumNetworkInfo"
                               fileDescription:&MessagesEthereumDefinitionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EthereumNetworkInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EthereumTokenInfo

@implementation EthereumTokenInfo

@dynamic hasAddress, address;
@dynamic hasChainId, chainId;
@dynamic hasSymbol, symbol;
@dynamic hasDecimals, decimals;
@dynamic hasName, name;

typedef struct EthereumTokenInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t decimals;
  NSData *address;
  NSString *symbol;
  NSString *name;
  uint64_t chainId;
} EthereumTokenInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumTokenInfo_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EthereumTokenInfo__storage_, address),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumTokenInfo_FieldNumber_ChainId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EthereumTokenInfo__storage_, chainId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "symbol",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumTokenInfo_FieldNumber_Symbol,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EthereumTokenInfo__storage_, symbol),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "decimals",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumTokenInfo_FieldNumber_Decimals,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EthereumTokenInfo__storage_, decimals),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumTokenInfo_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EthereumTokenInfo__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EthereumTokenInfo)
                                   messageName:@"EthereumTokenInfo"
                               fileDescription:&MessagesEthereumDefinitionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EthereumTokenInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EthereumDefinitions

@implementation EthereumDefinitions

@dynamic hasEncodedNetwork, encodedNetwork;
@dynamic hasEncodedToken, encodedToken;

typedef struct EthereumDefinitions__storage_ {
  uint32_t _has_storage_[1];
  NSData *encodedNetwork;
  NSData *encodedToken;
} EthereumDefinitions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encodedNetwork",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumDefinitions_FieldNumber_EncodedNetwork,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EthereumDefinitions__storage_, encodedNetwork),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "encodedToken",
        .dataTypeSpecific.clazz = Nil,
        .number = EthereumDefinitions_FieldNumber_EncodedToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EthereumDefinitions__storage_, encodedToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EthereumDefinitions)
                                   messageName:@"EthereumDefinitions"
                               fileDescription:&MessagesEthereumDefinitionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EthereumDefinitions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
