// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum CommandFlags

typedef GPB_ENUM(CommandFlags) {
  CommandFlags_Default = 0,
  CommandFlags_FactoryOnly = 1,
};

GPBEnumDescriptor *CommandFlags_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CommandFlags_IsValidValue(int32_t value);

#pragma mark - Enum MessageType

/**
 * *
 * Mapping between Trezor wire identifier (uint) and a protobuf message
 **/
typedef GPB_ENUM(MessageType) {
  /** Management */
  MessageType_MessageTypeInitialize = 0,
  MessageType_MessageTypePing = 1,
  MessageType_MessageTypeSuccess = 2,
  MessageType_MessageTypeFailure = 3,
  MessageType_MessageTypeChangePin = 4,
  MessageType_MessageTypeWipeDevice = 5,
  MessageType_MessageTypeGetEntropy = 9,
  MessageType_MessageTypeEntropy = 10,
  MessageType_MessageTypeLoadDevice = 13,
  MessageType_MessageTypeResetDevice = 14,
  MessageType_MessageTypeFeatures = 17,
  MessageType_MessageTypePinMatrixRequest = 18,
  MessageType_MessageTypePinMatrixAck = 19,
  MessageType_MessageTypeCancel = 20,
  MessageType_MessageTypeLockDevice = 24,
  MessageType_MessageTypeApplySettings = 25,
  MessageType_MessageTypeButtonRequest = 26,
  MessageType_MessageTypeButtonAck = 27,
  MessageType_MessageTypeApplyFlags = 28,
  MessageType_MessageTypeBackupDevice = 34,
  MessageType_MessageTypeEntropyRequest = 35,
  MessageType_MessageTypeEntropyAck = 36,
  MessageType_MessageTypePassphraseRequest = 41,
  MessageType_MessageTypePassphraseAck = 42,
  MessageType_MessageTypeRecoveryDevice = 45,
  MessageType_MessageTypeWordRequest = 46,
  MessageType_MessageTypeWordAck = 47,
  MessageType_MessageTypeGetFeatures = 55,
  MessageType_MessageTypeSdProtect = 79,
  MessageType_MessageTypeChangeWipeCode = 82,
  MessageType_MessageTypeEndSession = 83,
  MessageType_MessageTypeDoPreauthorized = 84,
  MessageType_MessageTypePreauthorizedRequest = 85,
  MessageType_MessageTypeCancelAuthorization = 86,
  MessageType_MessageTypeRebootToBootloader = 87,
  MessageType_MessageTypeSetU2Fcounter = 63,
  MessageType_MessageTypeGetNextU2Fcounter = 80,
  MessageType_MessageTypeNextU2Fcounter = 81,

  /**
   * Deprecated messages, kept for protobuf compatibility.
   * Both are marked wire_out so that we don't need to implement incoming handler for legacy
   **/
  MessageType_MessageTypeDeprecatedPassphraseStateRequest GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_Deprecated_PassphraseStateRequest is deprecated (see messages.proto).") = 77,
  MessageType_MessageTypeDeprecatedPassphraseStateAck GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_Deprecated_PassphraseStateAck is deprecated (see messages.proto).") = 78,

  /** Bootloader */
  MessageType_MessageTypeFirmwareErase = 6,
  MessageType_MessageTypeFirmwareEraseEx = 16,
  MessageType_MessageTypeFirmwareUpload = 7,
  MessageType_MessageTypeFirmwareRequest = 8,
  MessageType_MessageTypeSelfTest = 32,
  MessageType_MessageTypeReboot = 30000,
  MessageType_MessageTypeFirmwareUpdateEmmc = 30001,

  /** Bitcoin */
  MessageType_MessageTypeGetPublicKey = 11,
  MessageType_MessageTypePublicKey = 12,
  MessageType_MessageTypeSignTx = 15,
  MessageType_MessageTypeTxRequest = 21,
  MessageType_MessageTypeTxAck = 22,
  MessageType_MessageTypeGetAddress = 29,
  MessageType_MessageTypeAddress = 30,
  MessageType_MessageTypeSignMessage = 38,
  MessageType_MessageTypeVerifyMessage = 39,
  MessageType_MessageTypeMessageSignature = 40,
  MessageType_MessageTypeGetOwnershipId = 43,
  MessageType_MessageTypeOwnershipId = 44,
  MessageType_MessageTypeGetOwnershipProof = 49,
  MessageType_MessageTypeOwnershipProof = 50,
  MessageType_MessageTypeAuthorizeCoinJoin = 51,
  MessageType_MessageTypeSignPsbt = 10052,
  MessageType_MessageTypeSignedPsbt = 10053,

  /** Crypto */
  MessageType_MessageTypeCipherKeyValue = 23,
  MessageType_MessageTypeCipheredKeyValue = 48,
  MessageType_MessageTypeSignIdentity = 53,
  MessageType_MessageTypeSignedIdentity = 54,
  MessageType_MessageTypeGetEcdhsessionKey = 61,
  MessageType_MessageTypeEcdhsessionKey = 62,
  MessageType_MessageTypeCosiCommit = 71,
  MessageType_MessageTypeCosiCommitment = 72,
  MessageType_MessageTypeCosiSign = 73,
  MessageType_MessageTypeCosiSignature = 74,
  MessageType_MessageTypeBatchGetPublickeys = 10016,
  MessageType_MessageTypeEcdsaPublicKeys = 10017,

  /** Debug */
  MessageType_MessageTypeDebugLinkDecision = 100,
  MessageType_MessageTypeDebugLinkGetState = 101,
  MessageType_MessageTypeDebugLinkState = 102,
  MessageType_MessageTypeDebugLinkStop = 103,
  MessageType_MessageTypeDebugLinkLog = 104,
  MessageType_MessageTypeDebugLinkMemoryRead = 110,
  MessageType_MessageTypeDebugLinkMemory = 111,
  MessageType_MessageTypeDebugLinkMemoryWrite = 112,
  MessageType_MessageTypeDebugLinkFlashErase = 113,
  MessageType_MessageTypeDebugLinkLayout = 9001,
  MessageType_MessageTypeDebugLinkReseedRandom = 9002,
  MessageType_MessageTypeDebugLinkRecordScreen = 9003,
  MessageType_MessageTypeDebugLinkEraseSdCard = 9005,
  MessageType_MessageTypeDebugLinkWatchLayout = 9006,

  /** Emmc */
  MessageType_MessageTypeEmmcFixPermission = 30100,
  MessageType_MessageTypeEmmcPath = 30101,
  MessageType_MessageTypeEmmcPathInfo = 30102,
  MessageType_MessageTypeEmmcFile = 30103,
  MessageType_MessageTypeEmmcFileRead = 30104,
  MessageType_MessageTypeEmmcFileWrite = 30105,
  MessageType_MessageTypeEmmcFileDelete = 30106,
  MessageType_MessageTypeEmmcDir = 30107,
  MessageType_MessageTypeEmmcDirList = 30108,
  MessageType_MessageTypeEmmcDirMake = 30109,
  MessageType_MessageTypeEmmcDirRemove = 30110,

  /** Ethereum */
  MessageType_MessageTypeEthereumGetPublicKey = 450,
  MessageType_MessageTypeEthereumPublicKey = 451,
  MessageType_MessageTypeEthereumGetAddress = 56,
  MessageType_MessageTypeEthereumAddress = 57,
  MessageType_MessageTypeEthereumSignTx = 58,
  MessageType_MessageTypeEthereumSignTxEip1559 = 452,
  MessageType_MessageTypeEthereumTxRequest = 59,
  MessageType_MessageTypeEthereumTxAck = 60,
  MessageType_MessageTypeEthereumSignMessage = 64,
  MessageType_MessageTypeEthereumVerifyMessage = 65,
  MessageType_MessageTypeEthereumMessageSignature = 66,
  MessageType_MessageTypeEthereumSignTypedData = 464,
  MessageType_MessageTypeEthereumTypedDataStructRequest = 465,
  MessageType_MessageTypeEthereumTypedDataStructAck = 466,
  MessageType_MessageTypeEthereumTypedDataValueRequest = 467,
  MessageType_MessageTypeEthereumTypedDataValueAck = 468,
  MessageType_MessageTypeEthereumTypedDataSignature = 469,
  MessageType_MessageTypeEthereumSignTypedHash = 470,

  /** Ethereum ONEKEY */
  MessageType_MessageTypeEthereumGetPublicKeyOneKey = 20100,
  MessageType_MessageTypeEthereumPublicKeyOneKey = 20101,
  MessageType_MessageTypeEthereumGetAddressOneKey = 20102,
  MessageType_MessageTypeEthereumAddressOneKey = 20103,
  MessageType_MessageTypeEthereumSignTxOneKey = 20104,
  MessageType_MessageTypeEthereumSignTxEip1559OneKey = 20105,
  MessageType_MessageTypeEthereumTxRequestOneKey = 20106,
  MessageType_MessageTypeEthereumTxAckOneKey = 20107,
  MessageType_MessageTypeEthereumSignMessageOneKey = 20108,
  MessageType_MessageTypeEthereumVerifyMessageOneKey = 20109,
  MessageType_MessageTypeEthereumMessageSignatureOneKey = 20110,
  MessageType_MessageTypeEthereumSignTypedDataOneKey = 20111,
  MessageType_MessageTypeEthereumTypedDataStructRequestOneKey = 20112,
  MessageType_MessageTypeEthereumTypedDataStructAckOneKey = 20113,
  MessageType_MessageTypeEthereumTypedDataValueRequestOneKey = 20114,
  MessageType_MessageTypeEthereumTypedDataValueAckOneKey = 20115,
  MessageType_MessageTypeEthereumTypedDataSignatureOneKey = 20116,
  MessageType_MessageTypeEthereumSignTypedHashOneKey = 20117,

  /** NEM */
  MessageType_MessageTypeNemgetAddress = 67,
  MessageType_MessageTypeNemaddress = 68,
  MessageType_MessageTypeNemsignTx = 69,
  MessageType_MessageTypeNemsignedTx = 70,
  MessageType_MessageTypeNemdecryptMessage = 75,
  MessageType_MessageTypeNemdecryptedMessage = 76,

  /** Tezos */
  MessageType_MessageTypeTezosGetAddress = 150,
  MessageType_MessageTypeTezosAddress = 151,
  MessageType_MessageTypeTezosSignTx = 152,
  MessageType_MessageTypeTezosSignedTx = 153,
  MessageType_MessageTypeTezosGetPublicKey = 154,
  MessageType_MessageTypeTezosPublicKey = 155,

  /** Stellar */
  MessageType_MessageTypeStellarSignTx = 202,
  MessageType_MessageTypeStellarTxOpRequest = 203,
  MessageType_MessageTypeStellarGetAddress = 207,
  MessageType_MessageTypeStellarAddress = 208,
  MessageType_MessageTypeStellarCreateAccountOp = 210,
  MessageType_MessageTypeStellarPaymentOp = 211,
  MessageType_MessageTypeStellarPathPaymentStrictReceiveOp = 212,
  MessageType_MessageTypeStellarManageSellOfferOp = 213,
  MessageType_MessageTypeStellarCreatePassiveSellOfferOp = 214,
  MessageType_MessageTypeStellarSetOptionsOp = 215,
  MessageType_MessageTypeStellarChangeTrustOp = 216,
  MessageType_MessageTypeStellarAllowTrustOp = 217,
  MessageType_MessageTypeStellarAccountMergeOp = 218,

  /** omitted: StellarInflationOp is not a supported operation, would be 219 */
  MessageType_MessageTypeStellarManageDataOp = 220,
  MessageType_MessageTypeStellarBumpSequenceOp = 221,
  MessageType_MessageTypeStellarManageBuyOfferOp = 222,
  MessageType_MessageTypeStellarPathPaymentStrictSendOp = 223,
  MessageType_MessageTypeStellarSignedTx = 230,
  MessageType_MessageTypeCardanoGetPublicKey = 305,
  MessageType_MessageTypeCardanoPublicKey = 306,
  MessageType_MessageTypeCardanoGetAddress = 307,
  MessageType_MessageTypeCardanoAddress = 308,
  MessageType_MessageTypeCardanoTxItemAck = 313,
  MessageType_MessageTypeCardanoTxAuxiliaryDataSupplement = 314,
  MessageType_MessageTypeCardanoTxWitnessRequest = 315,
  MessageType_MessageTypeCardanoTxWitnessResponse = 316,
  MessageType_MessageTypeCardanoTxHostAck = 317,
  MessageType_MessageTypeCardanoTxBodyHash = 318,
  MessageType_MessageTypeCardanoSignTxFinished = 319,
  MessageType_MessageTypeCardanoSignTxInit = 320,
  MessageType_MessageTypeCardanoTxInput = 321,
  MessageType_MessageTypeCardanoTxOutput = 322,
  MessageType_MessageTypeCardanoAssetGroup = 323,
  MessageType_MessageTypeCardanoToken = 324,
  MessageType_MessageTypeCardanoTxCertificate = 325,
  MessageType_MessageTypeCardanoTxWithdrawal = 326,
  MessageType_MessageTypeCardanoTxAuxiliaryData = 327,
  MessageType_MessageTypeCardanoPoolOwner = 328,
  MessageType_MessageTypeCardanoPoolRelayParameters = 329,
  MessageType_MessageTypeCardanoGetNativeScriptHash = 330,
  MessageType_MessageTypeCardanoNativeScriptHash = 331,
  MessageType_MessageTypeCardanoTxMint = 332,
  MessageType_MessageTypeCardanoTxCollateralInput = 333,
  MessageType_MessageTypeCardanoTxRequiredSigner = 334,
  MessageType_MessageTypeCardanoTxInlineDatumChunk = 335,
  MessageType_MessageTypeCardanoTxReferenceScriptChunk = 336,
  MessageType_MessageTypeCardanoTxReferenceInput = 337,
  MessageType_MessageTypeCardanoSignMessage = 350,
  MessageType_MessageTypeCardanoMessageSignature = 351,

  /** Ripple */
  MessageType_MessageTypeRippleGetAddress = 400,
  MessageType_MessageTypeRippleAddress = 401,
  MessageType_MessageTypeRippleSignTx = 402,
  MessageType_MessageTypeRippleSignedTx = 403,

  /** Monero */
  MessageType_MessageTypeMoneroTransactionInitRequest = 501,
  MessageType_MessageTypeMoneroTransactionInitAck = 502,
  MessageType_MessageTypeMoneroTransactionSetInputRequest = 503,
  MessageType_MessageTypeMoneroTransactionSetInputAck = 504,
  MessageType_MessageTypeMoneroTransactionInputsPermutationRequest = 505,
  MessageType_MessageTypeMoneroTransactionInputsPermutationAck = 506,
  MessageType_MessageTypeMoneroTransactionInputViniRequest = 507,
  MessageType_MessageTypeMoneroTransactionInputViniAck = 508,
  MessageType_MessageTypeMoneroTransactionAllInputsSetRequest = 509,
  MessageType_MessageTypeMoneroTransactionAllInputsSetAck = 510,
  MessageType_MessageTypeMoneroTransactionSetOutputRequest = 511,
  MessageType_MessageTypeMoneroTransactionSetOutputAck = 512,
  MessageType_MessageTypeMoneroTransactionAllOutSetRequest = 513,
  MessageType_MessageTypeMoneroTransactionAllOutSetAck = 514,
  MessageType_MessageTypeMoneroTransactionSignInputRequest = 515,
  MessageType_MessageTypeMoneroTransactionSignInputAck = 516,
  MessageType_MessageTypeMoneroTransactionFinalRequest = 517,
  MessageType_MessageTypeMoneroTransactionFinalAck = 518,
  MessageType_MessageTypeMoneroKeyImageExportInitRequest = 530,
  MessageType_MessageTypeMoneroKeyImageExportInitAck = 531,
  MessageType_MessageTypeMoneroKeyImageSyncStepRequest = 532,
  MessageType_MessageTypeMoneroKeyImageSyncStepAck = 533,
  MessageType_MessageTypeMoneroKeyImageSyncFinalRequest = 534,
  MessageType_MessageTypeMoneroKeyImageSyncFinalAck = 535,
  MessageType_MessageTypeMoneroGetAddress = 540,
  MessageType_MessageTypeMoneroAddress = 541,
  MessageType_MessageTypeMoneroGetWatchKey = 542,
  MessageType_MessageTypeMoneroWatchKey = 543,
  MessageType_MessageTypeDebugMoneroDiagRequest = 546,
  MessageType_MessageTypeDebugMoneroDiagAck = 547,
  MessageType_MessageTypeMoneroGetTxKeyRequest = 550,
  MessageType_MessageTypeMoneroGetTxKeyAck = 551,
  MessageType_MessageTypeMoneroLiveRefreshStartRequest = 552,
  MessageType_MessageTypeMoneroLiveRefreshStartAck = 553,
  MessageType_MessageTypeMoneroLiveRefreshStepRequest = 554,
  MessageType_MessageTypeMoneroLiveRefreshStepAck = 555,
  MessageType_MessageTypeMoneroLiveRefreshFinalRequest = 556,
  MessageType_MessageTypeMoneroLiveRefreshFinalAck = 557,

  /** EOS */
  MessageType_MessageTypeEosGetPublicKey = 600,
  MessageType_MessageTypeEosPublicKey = 601,
  MessageType_MessageTypeEosSignTx = 602,
  MessageType_MessageTypeEosTxActionRequest = 603,
  MessageType_MessageTypeEosTxActionAck = 604,
  MessageType_MessageTypeEosSignedTx = 605,

  /** Binance */
  MessageType_MessageTypeBinanceGetAddress = 700,
  MessageType_MessageTypeBinanceAddress = 701,
  MessageType_MessageTypeBinanceGetPublicKey = 702,
  MessageType_MessageTypeBinancePublicKey = 703,
  MessageType_MessageTypeBinanceSignTx = 704,
  MessageType_MessageTypeBinanceTxRequest = 705,
  MessageType_MessageTypeBinanceTransferMsg = 706,
  MessageType_MessageTypeBinanceOrderMsg = 707,
  MessageType_MessageTypeBinanceCancelMsg = 708,
  MessageType_MessageTypeBinanceSignedTx = 709,

  /** Solana */
  MessageType_MessageTypeSolanaGetAddress = 10100,
  MessageType_MessageTypeSolanaAddress = 10101,
  MessageType_MessageTypeSolanaSignTx = 10102,
  MessageType_MessageTypeSolanaSignedTx = 10103,

  /** Starcoin */
  MessageType_MessageTypeStarcoinGetAddress = 10300,
  MessageType_MessageTypeStarcoinAddress = 10301,
  MessageType_MessageTypeStarcoinGetPublicKey = 10302,
  MessageType_MessageTypeStarcoinPublicKey = 10303,
  MessageType_MessageTypeStarcoinSignTx = 10304,
  MessageType_MessageTypeStarcoinSignedTx = 10305,
  MessageType_MessageTypeStarcoinSignMessage = 10306,
  MessageType_MessageTypeStarcoinMessageSignature = 10307,
  MessageType_MessageTypeStarcoinVerifyMessage = 10308,

  /** Aptos */
  MessageType_MessageTypeAptosGetAddress = 10600,
  MessageType_MessageTypeAptosAddress = 10601,
  MessageType_MessageTypeAptosSignTx = 10602,
  MessageType_MessageTypeAptosSignedTx = 10603,
  MessageType_MessageTypeAptosSignMessage = 10604,
  MessageType_MessageTypeAptosMessageSignature = 10605,

  /** WebAuthn */
  MessageType_MessageTypeWebAuthnListResidentCredentials = 800,
  MessageType_MessageTypeWebAuthnCredentials = 801,
  MessageType_MessageTypeWebAuthnAddResidentCredential = 802,
  MessageType_MessageTypeWebAuthnRemoveResidentCredential = 803,

  /** bixin */
  MessageType_MessageTypeBixinSeedOperate GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinSeedOperate is deprecated (see messages.proto).") = 901,
  MessageType_MessageTypeBixinMessageSe = 902,
  MessageType_MessageTypeBixinOutMessageSe = 904,
  MessageType_MessageTypeBixinBackupRequest GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinBackupRequest is deprecated (see messages.proto).") = 905,
  MessageType_MessageTypeBixinBackupAck GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinBackupAck is deprecated (see messages.proto).") = 906,
  MessageType_MessageTypeBixinRestoreRequest GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinRestoreRequest is deprecated (see messages.proto).") = 907,
  MessageType_MessageTypeBixinRestoreAck GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinRestoreAck is deprecated (see messages.proto).") = 908,
  MessageType_MessageTypeBixinVerifyDeviceRequest = 909,
  MessageType_MessageTypeBixinVerifyDeviceAck = 910,
  MessageType_MessageTypeBixinWhiteListRequest GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinWhiteListRequest is deprecated (see messages.proto).") = 911,
  MessageType_MessageTypeBixinWhiteListAck GPB_DEPRECATED_MSG("hw.trezor.messages.MessageType_BixinWhiteListAck is deprecated (see messages.proto).") = 912,
  MessageType_MessageTypeBixinLoadDevice = 913,
  MessageType_MessageTypeBixinBackupDevice = 914,
  MessageType_MessageTypeBixinBackupDeviceAck = 915,
  MessageType_MessageTypeBixinPinInputOnDevice = 10000,
  MessageType_MessageTypeEthereumSignMessageEip712 = 10200,
  MessageType_MessageTypeGetPublicKeyMultiple = 10210,
  MessageType_MessageTypePublicKeyMultiple = 10211,

  /** Conflux */
  MessageType_MessageTypeConfluxGetAddress = 10112,
  MessageType_MessageTypeConfluxAddress = 10113,
  MessageType_MessageTypeConfluxSignTx = 10114,
  MessageType_MessageTypeConfluxTxRequest = 10115,
  MessageType_MessageTypeConfluxTxAck = 10116,
  MessageType_MessageTypeConfluxSignMessage = 10117,
  MessageType_MessageTypeConfluxSignMessageCip23 = 10118,
  MessageType_MessageTypeConfluxMessageSignature = 10119,

  /** tron */
  MessageType_MessageTypeTronGetAddress = 10501,
  MessageType_MessageTypeTronAddress = 10502,
  MessageType_MessageTypeTronSignTx = 10503,
  MessageType_MessageTypeTronSignedTx = 10504,
  MessageType_MessageTypeTronSignMessage = 10505,
  MessageType_MessageTypeTronMessageSignature = 10506,

  /** near */
  MessageType_MessageTypeNearGetAddress = 10701,
  MessageType_MessageTypeNearAddress = 10702,
  MessageType_MessageTypeNearSignTx = 10703,
  MessageType_MessageTypeNearSignedTx = 10704,

  /** Cosmos */
  MessageType_MessageTypeCosmosGetAddress = 10800,
  MessageType_MessageTypeCosmosAddress = 10801,
  MessageType_MessageTypeCosmosSignTx = 10802,
  MessageType_MessageTypeCosmosSignedTx = 10803,

  /** Algorand */
  MessageType_MessageTypeAlgorandGetAddress = 10900,
  MessageType_MessageTypeAlgorandAddress = 10901,
  MessageType_MessageTypeAlgorandSignTx = 10902,
  MessageType_MessageTypeAlgorandSignedTx = 10903,

  /** Polkadot */
  MessageType_MessageTypePolkadotGetAddress = 11000,
  MessageType_MessageTypePolkadotAddress = 11001,
  MessageType_MessageTypePolkadotSignTx = 11002,
  MessageType_MessageTypePolkadotSignedTx = 11003,

  /** sui */
  MessageType_MessageTypeSuiGetAddress = 11100,
  MessageType_MessageTypeSuiAddress = 11101,
  MessageType_MessageTypeSuiSignTx = 11102,
  MessageType_MessageTypeSuiSignedTx = 11103,
  MessageType_MessageTypeSuiSignMessage = 11104,
  MessageType_MessageTypeSuiMessageSignature = 11105,
  MessageType_MessageTypeSuiTxRequest = 11106,
  MessageType_MessageTypeSuiTxAck = 11107,

  /** Filecoin */
  MessageType_MessageTypeFilecoinGetAddress = 11200,
  MessageType_MessageTypeFilecoinAddress = 11201,
  MessageType_MessageTypeFilecoinSignTx = 11202,
  MessageType_MessageTypeFilecoinSignedTx = 11203,

  /** Kaspa */
  MessageType_MessageTypeKaspaGetAddress = 11300,
  MessageType_MessageTypeKaspaAddress = 11301,
  MessageType_MessageTypeKaspaSignTx = 11302,
  MessageType_MessageTypeKaspaSignedTx = 11303,
  MessageType_MessageTypeKaspaTxInputRequest = 11304,
  MessageType_MessageTypeKaspaTxInputAck = 11305,

  /** Nexa */
  MessageType_MessageTypeNexaGetAddress = 11400,
  MessageType_MessageTypeNexaAddress = 11401,
  MessageType_MessageTypeNexaSignTx = 11402,
  MessageType_MessageTypeNexaSignedTx = 11403,
  MessageType_MessageTypeNexaTxInputRequest = 11404,
  MessageType_MessageTypeNexaTxInputAck = 11405,

  /** Nostr */
  MessageType_MessageTypeNostrGetPublicKey = 11500,
  MessageType_MessageTypeNostrPublicKey = 11501,
  MessageType_MessageTypeNostrSignEvent = 11502,
  MessageType_MessageTypeNostrSignedEvent = 11503,
  MessageType_MessageTypeNostrEncryptMessage = 11504,
  MessageType_MessageTypeNostrEncryptedMessage = 11505,
  MessageType_MessageTypeNostrDecryptMessage = 11506,
  MessageType_MessageTypeNostrDecryptedMessage = 11507,
  MessageType_MessageTypeNostrSignSchnorr = 11508,
  MessageType_MessageTypeNostrSignedSchnorr = 11509,

  /** lnurl */
  MessageType_MessageTypeLnurlAuth = 11600,
  MessageType_MessageTypeLnurlAuthResp = 11601,

  /** nervos */
  MessageType_MessageTypeNervosGetAddress = 11701,
  MessageType_MessageTypeNervosAddress = 11702,
  MessageType_MessageTypeNervosSignTx = 11703,
  MessageType_MessageTypeNervosSignedTx = 11704,
  MessageType_MessageTypeNervosTxRequest = 11705,
  MessageType_MessageTypeNervosTxAck = 11706,

  /** dnx */
  MessageType_MessageTypeDnxGetAddress = 11800,
  MessageType_MessageTypeDnxAddress = 11801,
  MessageType_MessageTypeDnxSignTx = 11802,
  MessageType_MessageTypeDnxInputRequest = 11803,
  MessageType_MessageTypeDnxInputAck = 11804,
  MessageType_MessageTypeDnxRtsigsRequest = 11805,
  MessageType_MessageTypeDnxSignedTx = 11806,

  /** ton */
  MessageType_MessageTypeTonGetAddress = 11901,
  MessageType_MessageTypeTonAddress = 11902,
  MessageType_MessageTypeTonSignMessage = 11903,
  MessageType_MessageTypeTonSignedMessage = 11904,
  MessageType_MessageTypeTonSignProof = 11905,
  MessageType_MessageTypeTonSignedProof = 11906,

  /** scdo */
  MessageType_MessageTypeScdoGetAddress = 12001,
  MessageType_MessageTypeScdoAddress = 12002,
  MessageType_MessageTypeScdoSignTx = 12003,
  MessageType_MessageTypeScdoSignedTx = 12004,
  MessageType_MessageTypeScdoTxAck = 12005,
  MessageType_MessageTypeScdoSignMessage = 12006,
  MessageType_MessageTypeScdoSignedMessage = 12007,

  /** alephium */
  MessageType_MessageTypeAlephiumGetAddress = 12101,
  MessageType_MessageTypeAlephiumAddress = 12102,
  MessageType_MessageTypeAlephiumSignTx = 12103,
  MessageType_MessageTypeAlephiumSignedTx = 12104,
  MessageType_MessageTypeAlephiumTxRequest = 12105,
  MessageType_MessageTypeAlephiumTxAck = 12106,
  MessageType_MessageTypeAlephiumBytecodeRequest = 12107,
  MessageType_MessageTypeAlephiumBytecodeAck = 12108,
  MessageType_MessageTypeAlephiumSignMessage = 12109,
  MessageType_MessageTypeAlephiumMessageSignature = 12110,

  /** onekey */
  MessageType_MessageTypeDeviceBackToBoot = 903,
  MessageType_MessageTypeDeviceInfoSettings = 10001,
  MessageType_MessageTypeGetDeviceInfo = 10002,
  MessageType_MessageTypeDeviceInfo = 10003,
  MessageType_MessageTypeReadSepublicKey = 10004,
  MessageType_MessageTypeSepublicKey = 10005,
  MessageType_MessageTypeWriteSepublicCert = 10006,
  MessageType_MessageTypeReadSepublicCert = 10007,
  MessageType_MessageTypeSepublicCert = 10008,
  MessageType_MessageTypeSpiFlashWrite = 10009,
  MessageType_MessageTypeSpiFlashRead = 10010,
  MessageType_MessageTypeSpiFlashData = 10011,
  MessageType_MessageTypeSesignMessage = 10012,
  MessageType_MessageTypeSemessageSignature = 10013,

  /** {10014,10015} only avaiable on Onekey Mini */
  MessageType_MessageTypeNftwriteInfo = 10014,
  MessageType_MessageTypeNftwriteData = 10015,

  /** {10018-10022} only avaiable on Onekey Touch */
  MessageType_MessageTypeResourceUpload = 10018,
  MessageType_MessageTypeZoomRequest = 10019,
  MessageType_MessageTypeResourceRequest = 10020,
  MessageType_MessageTypeResourceAck = 10021,
  MessageType_MessageTypeResourceUpdate = 10022,
  MessageType_MessageTypeListResDir = 10023,
  MessageType_MessageTypeFileInfoList = 10024,
  MessageType_MessageTypeOnekeyGetFeatures = 10025,
  MessageType_MessageTypeOnekeyFeatures = 10026,
};

GPBEnumDescriptor *MessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageType_IsValidValue(int32_t value);

#pragma mark - MessagesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MessagesRoot : GPBRootObject
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
