// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: messages-ethereum-definitions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum EthereumDefinitionType

/**
 * *
 * Ethereum definitions type enum.
 * Used to check the encoded EthereumNetworkInfo or EthereumTokenInfo message.
 **/
typedef GPB_ENUM(EthereumDefinitionType) {
  EthereumDefinitionType_Network = 0,
  EthereumDefinitionType_Token = 1,
};

GPBEnumDescriptor *EthereumDefinitionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EthereumDefinitionType_IsValidValue(int32_t value);

#pragma mark - MessagesEthereumDefinitionsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MessagesEthereumDefinitionsRoot : GPBRootObject
@end

#pragma mark - EthereumNetworkInfo

typedef GPB_ENUM(EthereumNetworkInfo_FieldNumber) {
  EthereumNetworkInfo_FieldNumber_ChainId = 1,
  EthereumNetworkInfo_FieldNumber_Symbol = 2,
  EthereumNetworkInfo_FieldNumber_Slip44 = 3,
  EthereumNetworkInfo_FieldNumber_Name = 4,
  EthereumNetworkInfo_FieldNumber_Icon = 101,
  EthereumNetworkInfo_FieldNumber_PrimaryColor = 102,
};

/**
 * *
 * Ethereum network definition. Used to (de)serialize the definition.
 *
 * Definition types should not be cross-parseable, i.e., it should not be possible to
 * incorrectly parse network info as token info or vice versa.
 * To achieve that, the first field is wire type varint while the second field is wire type
 * length-delimited. Both are a mismatch for the token definition.
 *
 * \@embed
 **/
GPB_FINAL @interface EthereumNetworkInfo : GPBMessage

@property(nonatomic, readwrite) uint64_t chainId;
@property(nonatomic, readwrite) BOOL hasChainId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *symbol;
/** Test to see if @c symbol has been set. */
@property(nonatomic, readwrite) BOOL hasSymbol;

@property(nonatomic, readwrite) uint32_t slip44;
@property(nonatomic, readwrite) BOOL hasSlip44;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *icon;
/** Test to see if @c icon has been set. */
@property(nonatomic, readwrite) BOOL hasIcon;

@property(nonatomic, readwrite) uint64_t primaryColor;
@property(nonatomic, readwrite) BOOL hasPrimaryColor;

@end

#pragma mark - EthereumTokenInfo

typedef GPB_ENUM(EthereumTokenInfo_FieldNumber) {
  EthereumTokenInfo_FieldNumber_Address = 1,
  EthereumTokenInfo_FieldNumber_ChainId = 2,
  EthereumTokenInfo_FieldNumber_Symbol = 3,
  EthereumTokenInfo_FieldNumber_Decimals = 4,
  EthereumTokenInfo_FieldNumber_Name = 5,
};

/**
 * *
 * Ethereum token definition. Used to (de)serialize the definition.
 *
 * Definition types should not be cross-parseable, i.e., it should not be possible to
 * incorrectly parse network info as token info or vice versa.
 * To achieve that, the first field is wire type length-delimited while the second field
 * is wire type varint. Both are a mismatch for the network definition.
 *
 * \@embed
 **/
GPB_FINAL @interface EthereumTokenInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *address;
/** Test to see if @c address has been set. */
@property(nonatomic, readwrite) BOOL hasAddress;

@property(nonatomic, readwrite) uint64_t chainId;
@property(nonatomic, readwrite) BOOL hasChainId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *symbol;
/** Test to see if @c symbol has been set. */
@property(nonatomic, readwrite) BOOL hasSymbol;

@property(nonatomic, readwrite) uint32_t decimals;
@property(nonatomic, readwrite) BOOL hasDecimals;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@end

#pragma mark - EthereumDefinitions

typedef GPB_ENUM(EthereumDefinitions_FieldNumber) {
  EthereumDefinitions_FieldNumber_EncodedNetwork = 1,
  EthereumDefinitions_FieldNumber_EncodedToken = 2,
};

/**
 * *
 * Contains an encoded Ethereum network and/or token definition. See ethereum-definitions.md for details.
 * \@embed
 **/
GPB_FINAL @interface EthereumDefinitions : GPBMessage

/** encoded Ethereum network */
@property(nonatomic, readwrite, copy, null_resettable) NSData *encodedNetwork;
/** Test to see if @c encodedNetwork has been set. */
@property(nonatomic, readwrite) BOOL hasEncodedNetwork;

/** encoded Ethereum token */
@property(nonatomic, readwrite, copy, null_resettable) NSData *encodedToken;
/** Test to see if @c encodedToken has been set. */
@property(nonatomic, readwrite) BOOL hasEncodedToken;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
